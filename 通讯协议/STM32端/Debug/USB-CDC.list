
USB-CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb0  08009eb0  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eb8  08009eb8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eb8  08009eb8  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ebc  08009ebc  00019ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08009ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          0000659c  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20006700  20006700  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001903a  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042d8  00000000  00000000  000391ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  0003d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  0003e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a75  00000000  00000000  0003fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191e9  00000000  00000000  00065545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cecb2  00000000  00000000  0007e72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d3e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f8  00000000  00000000  0014d430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dc8 	.word	0x08009dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	08009dc8 	.word	0x08009dc8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <CDC_SendFeed>:
			Fed 数据包
			Len 数据包的大小--占用内存字节数（协议规定为8Bytes）
  * @retval 无
  */
int CDC_SendFeed(uint8_t* Fed, uint16_t Len)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(Fed, Len);
 80004e0:	887b      	ldrh	r3, [r7, #2]
 80004e2:	4619      	mov	r1, r3
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f008 fef5 	bl	80092d4 <CDC_Transmit_FS>
	return 0;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Pack_Data_ROS2>:
		sendinfo  要发送的结构体
		feedArray 用于暂存数据的缓冲数组
  * @retval 无
  */
void Pack_Data_ROS2(_send_packetinfo sendinfo,uint8_t* feedArray)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	memcpy(feedArray, sendinfo, (size_t)(sizeof(_sendpacket)-2));
 80004fe:	220e      	movs	r2, #14
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	6838      	ldr	r0, [r7, #0]
 8000504:	f009 fb7e 	bl	8009c04 <memcpy>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <UnPack_Data_ROS2>:
		receive_Array 接收到的数据数组
		receive_info 接收数据的结构体
  * @retval 无
  */
void UnPack_Data_ROS2(uint8_t *receive_Array,_receive_packetinfo receive_info)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
	memmove(receive_info,receive_Array, 30);
 800051a:	221e      	movs	r2, #30
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	6838      	ldr	r0, [r7, #0]
 8000520:	f009 fb7e 	bl	8009c20 <memmove>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <CDC_Receive_ROS2>:
		Len 数组长度
		packinfo 具体接收数据的结构体
  * @retval 无
  */
int CDC_Receive_ROS2(uint8_t* Buf, uint16_t Len,_receive_packetinfo packinfo)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	460b      	mov	r3, r1
 8000536:	607a      	str	r2, [r7, #4]
 8000538:	817b      	strh	r3, [r7, #10]
	CDC_Receive_FS(Buf, &Len);
 800053a:	f107 030a 	add.w	r3, r7, #10
 800053e:	4619      	mov	r1, r3
 8000540:	68f8      	ldr	r0, [r7, #12]
 8000542:	f008 fe9d 	bl	8009280 <CDC_Receive_FS>
	if(Buf[0]==(uint8_t)(0xA5)){UnPack_Data_ROS2(Buf,packinfo);}
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2ba5      	cmp	r3, #165	; 0xa5
 800054c:	d105      	bne.n	800055a <CDC_Receive_ROS2+0x2e>
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f7ff ffdd 	bl	8000510 <UnPack_Data_ROS2>
	else return -1;
	return 0;
 8000556:	2300      	movs	r3, #0
 8000558:	e001      	b.n	800055e <CDC_Receive_ROS2+0x32>
	else return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <Data_Select>:
		Origin_Data 打包后的初始数组
		Finish_Data 整理过的发送数组
  * @retval 无
  */
void Data_Select(uint8_t* Origin_Data,uint8_t* Finish_Data)//因为打包后数组中间会多2个字节，所以需要进行调整才能发送
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
	for(int i=0;i<2;i++)
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	e00a      	b.n	800058c <Data_Select+0x26>
	Finish_Data[i]=Origin_Data[i];
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	441a      	add	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	6839      	ldr	r1, [r7, #0]
 8000580:	440b      	add	r3, r1
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<2;i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b01      	cmp	r3, #1
 8000590:	ddf1      	ble.n	8000576 <Data_Select+0x10>
	for(int i=2;i<12;i++)
 8000592:	2302      	movs	r3, #2
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	e00b      	b.n	80005b0 <Data_Select+0x4a>
	Finish_Data[i]=Origin_Data[i+2];
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3302      	adds	r3, #2
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	441a      	add	r2, r3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	6839      	ldr	r1, [r7, #0]
 80005a4:	440b      	add	r3, r1
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	701a      	strb	r2, [r3, #0]
	for(int i=2;i<12;i++)
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	3301      	adds	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b0b      	cmp	r3, #11
 80005b4:	ddf0      	ble.n	8000598 <Data_Select+0x32>
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <MX_FREERTOS_Init+0x28>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <MX_FREERTOS_Init+0x2c>)
 80005ce:	f006 f8a3 	bl	8006718 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <MX_FREERTOS_Init+0x30>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <MX_FREERTOS_Init+0x34>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <MX_FREERTOS_Init+0x38>)
 80005de:	f006 f89b 	bl	8006718 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <MX_FREERTOS_Init+0x3c>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	08009e58 	.word	0x08009e58
 80005f0:	08000605 	.word	0x08000605
 80005f4:	20000180 	.word	0x20000180
 80005f8:	08009e7c 	.word	0x08009e7c
 80005fc:	08000619 	.word	0x08000619
 8000600:	20000184 	.word	0x20000184

08000604 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800060c:	f008 fd8e 	bl	800912c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f006 f913 	bl	800683c <osDelay>
 8000616:	e7fb      	b.n	8000610 <StartDefaultTask+0xc>

08000618 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09a      	sub	sp, #104	; 0x68
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	  _send_packetinfo sd;
	  sd = (_sendpacket *)malloc(sizeof(_sendpacket));
 8000620:	2010      	movs	r0, #16
 8000622:	f009 fae7 	bl	8009bf4 <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	667b      	str	r3, [r7, #100]	; 0x64
	  uint8_t feedPackage[14];
	  uint8_t RecePackage[60];
	  uint8_t SendData[12];
	  _receive_packetinfo receinfo;
	  receinfo = (_receive_packetinfo)malloc(sizeof(_receive_packet));
 800062a:	2020      	movs	r0, #32
 800062c:	f009 fae2 	bl	8009bf4 <malloc>
 8000630:	4603      	mov	r3, r0
 8000632:	663b      	str	r3, [r7, #96]	; 0x60
	  sd->header = 0X5A;
 8000634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000636:	225a      	movs	r2, #90	; 0x5a
 8000638:	701a      	strb	r2, [r3, #0]
	  sd->robot_color = 1;
 800063a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800063c:	7853      	ldrb	r3, [r2, #1]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	7053      	strb	r3, [r2, #1]
	  sd->task_mode= 2;
 8000644:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000646:	7853      	ldrb	r3, [r2, #1]
 8000648:	2102      	movs	r1, #2
 800064a:	f361 0342 	bfi	r3, r1, #1, #2
 800064e:	7053      	strb	r3, [r2, #1]
	  sd->reserve = 5;
 8000650:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000652:	7853      	ldrb	r3, [r2, #1]
 8000654:	2105      	movs	r1, #5
 8000656:	f361 03c7 	bfi	r3, r1, #3, #5
 800065a:	7053      	strb	r3, [r2, #1]
	  sd->pitch=1.11;
 800065c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <StartTask02+0x9c>)
 8000660:	605a      	str	r2, [r3, #4]
	  sd->yaw=2.22;
 8000662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <StartTask02+0xa0>)
 8000666:	609a      	str	r2, [r3, #8]
	  sd->checksum=1813;
 8000668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800066a:	f240 7215 	movw	r2, #1813	; 0x715
 800066e:	819a      	strh	r2, [r3, #12]
	  Pack_Data_ROS2(sd, feedPackage);
 8000670:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000674:	4619      	mov	r1, r3
 8000676:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000678:	f7ff ff3c 	bl	80004f4 <Pack_Data_ROS2>
	  Data_Select(feedPackage,SendData);
 800067c:	f107 0208 	add.w	r2, r7, #8
 8000680:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff6d 	bl	8000566 <Data_Select>
  /* Infinite loop */
  for(;;)
  {
  CDC_SendFeed(SendData, 12);
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	210c      	movs	r1, #12
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff1e 	bl	80004d4 <CDC_SendFeed>
  CDC_Receive_ROS2(RecePackage, 30, receinfo);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800069e:	211e      	movs	r1, #30
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff43 	bl	800052c <CDC_Receive_ROS2>
  HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f000 fa0a 	bl	8000ac0 <HAL_Delay>
    osDelay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f006 f8c5 	bl	800683c <osDelay>
  CDC_SendFeed(SendData, 12);
 80006b2:	e7eb      	b.n	800068c <StartTask02+0x74>
 80006b4:	3f8e147b 	.word	0x3f8e147b
 80006b8:	400e147b 	.word	0x400e147b

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0x80>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_GPIO_Init+0x80>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_GPIO_Init+0x80>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_GPIO_Init+0x80>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <MX_GPIO_Init+0x80>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0x80>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0x84>)
 8000712:	f000 fca7 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8000716:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x84>)
 8000730:	f000 fafc 	bl	8000d2c <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40021c00 	.word	0x40021c00

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 f948 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f80a 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff ffb4 	bl	80006bc <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000754:	f005 ff96 	bl	8006684 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000758:	f7ff ff34 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800075c:	f005 ffb6 	bl	80066cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x1c>
	...

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f009 fa6e 	bl	8009c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80007d4:	2306      	movs	r3, #6
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80007d8:	2378      	movs	r3, #120	; 0x78
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007e0:	2305      	movs	r3, #5
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fed1 	bl	8002590 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f4:	f000 f820 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000804:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2103      	movs	r1, #3
 8000816:	4618      	mov	r0, r3
 8000818:	f002 f932 	bl	8002a80 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000822:	f000 f809 	bl	8000838 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_MspInit+0x54>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_MspInit+0x54>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa18 	bl	8000cbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f8d8 	bl	8000a80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008d0:	f007 fbc2 	bl	8008058 <xTaskGetSchedulerState>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d001      	beq.n	80008de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008da:	f008 f9ad 	bl	8008c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <OTG_FS_IRQHandler+0x10>)
 80008ea:	f000 fd24 	bl	8001336 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20005fc4 	.word	0x20005fc4

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f009 f93a 	bl	8009ba0 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20020000 	.word	0x20020000
 8000958:	00000400 	.word	0x00000400
 800095c:	20000188 	.word	0x20000188
 8000960:	20006700 	.word	0x20006700

08000964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b2:	f7ff ffd7 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f009 f8f9 	bl	8009bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ba:	f7ff fec3 	bl	8000744 <main>
  bx  lr    
 80009be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80009cc:	08009ec0 	.word	0x08009ec0
  ldr r2, =_sbss
 80009d0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80009d4:	20006700 	.word	0x20006700

080009d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_Init+0x40>)
 80009e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_Init+0x40>)
 80009f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x40>)
 80009fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f94f 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff ff18 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023c00 	.word	0x40023c00

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f967 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f92f 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	2000018c 	.word	0x2000018c

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000018c 	.word	0x2000018c

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff29 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff3e 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff31 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffa2 	bl	8000c64 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e16b      	b.n	8001020 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 815a 	bne.w	800101a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80b4 	beq.w	800101a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b60      	ldr	r3, [pc, #384]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a5f      	ldr	r2, [pc, #380]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a5b      	ldr	r2, [pc, #364]	; (800103c <HAL_GPIO_Init+0x310>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a52      	ldr	r2, [pc, #328]	; (8001040 <HAL_GPIO_Init+0x314>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02b      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a51      	ldr	r2, [pc, #324]	; (8001044 <HAL_GPIO_Init+0x318>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x222>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a50      	ldr	r2, [pc, #320]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x21e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4f      	ldr	r2, [pc, #316]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4e      	ldr	r2, [pc, #312]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x216>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4d      	ldr	r2, [pc, #308]	; (8001054 <HAL_GPIO_Init+0x328>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <HAL_GPIO_Init+0x32c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4b      	ldr	r2, [pc, #300]	; (800105c <HAL_GPIO_Init+0x330>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x20a>
 8000f32:	2307      	movs	r3, #7
 8000f34:	e00e      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f36:	2308      	movs	r3, #8
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f52:	2300      	movs	r3, #0
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	4935      	ldr	r1, [pc, #212]	; (800103c <HAL_GPIO_Init+0x310>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <HAL_GPIO_Init+0x334>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f67f ae90 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40021400 	.word	0x40021400
 8001058:	40021800 	.word	0x40021800
 800105c:	40021c00 	.word	0x40021c00
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001098:	b08f      	sub	sp, #60	; 0x3c
 800109a:	af0a      	add	r7, sp, #40	; 0x28
 800109c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e10f      	b.n	80012c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f008 fa58 	bl	8009578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 ff97 	bl	800301a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	687e      	ldr	r6, [r7, #4]
 80010f4:	466d      	mov	r5, sp
 80010f6:	f106 0410 	add.w	r4, r6, #16
 80010fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001106:	e885 0003 	stmia.w	r5, {r0, r1}
 800110a:	1d33      	adds	r3, r6, #4
 800110c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f001 fe6e 	bl	8002df0 <USB_CoreInit>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2202      	movs	r2, #2
 800111e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e0d0      	b.n	80012c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f001 ff85 	bl	800303c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e04a      	b.n	80011ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	333d      	adds	r3, #61	; 0x3d
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	333c      	adds	r3, #60	; 0x3c
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	b298      	uxth	r0, r3
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	3344      	adds	r3, #68	; 0x44
 8001174:	4602      	mov	r2, r0
 8001176:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	3340      	adds	r3, #64	; 0x40
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	3348      	adds	r3, #72	; 0x48
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	334c      	adds	r3, #76	; 0x4c
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3354      	adds	r3, #84	; 0x54
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3af      	bcc.n	8001138 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e044      	b.n	8001268 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	3301      	adds	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d3b5      	bcc.n	80011de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	687e      	ldr	r6, [r7, #4]
 800127a:	466d      	mov	r5, sp
 800127c:	f106 0410 	add.w	r4, r6, #16
 8001280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001288:	e894 0003 	ldmia.w	r4, {r0, r1}
 800128c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001290:	1d33      	adds	r3, r6, #4
 8001292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001294:	6838      	ldr	r0, [r7, #0]
 8001296:	f001 ff1d 	bl	80030d4 <USB_DevInit>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e00d      	b.n	80012c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f86c 	bl	800439e <USB_DevDisconnect>

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_PCD_Start+0x1c>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e020      	b.n	800132e <HAL_PCD_Start+0x5e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d109      	bne.n	8001310 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001308:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fe6f 	bl	8002ff8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f003 f81c 	bl	800435c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001336:	b590      	push	{r4, r7, lr}
 8001338:	b08d      	sub	sp, #52	; 0x34
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 f8da 	bl	8004506 <USB_GetMode>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	f040 848a 	bne.w	8001c6e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f003 f83e 	bl	80043e0 <USB_ReadInterrupts>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8480 	beq.w	8001c6c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f003 f82b 	bl	80043e0 <USB_ReadInterrupts>
 800138a:	4603      	mov	r3, r0
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b02      	cmp	r3, #2
 8001392:	d107      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f002 0202 	and.w	r2, r2, #2
 80013a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 f819 	bl	80043e0 <USB_ReadInterrupts>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b10      	cmp	r3, #16
 80013b6:	d161      	bne.n	800147c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0210 	bic.w	r2, r2, #16
 80013c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f003 020f 	and.w	r2, r3, #15
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	3304      	adds	r3, #4
 80013e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	0c5b      	lsrs	r3, r3, #17
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d124      	bne.n	800143e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d035      	beq.n	800146c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800140a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	6a38      	ldr	r0, [r7, #32]
 8001414:	f002 fe50 	bl	80040b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001424:	441a      	add	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	6a1a      	ldr	r2, [r3, #32]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001436:	441a      	add	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	621a      	str	r2, [r3, #32]
 800143c:	e016      	b.n	800146c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	0c5b      	lsrs	r3, r3, #17
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	2b06      	cmp	r3, #6
 8001448:	d110      	bne.n	800146c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001450:	2208      	movs	r2, #8
 8001452:	4619      	mov	r1, r3
 8001454:	6a38      	ldr	r0, [r7, #32]
 8001456:	f002 fe2f 	bl	80040b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001466:	441a      	add	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0210 	orr.w	r2, r2, #16
 800147a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 ffad 	bl	80043e0 <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800148c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001490:	f040 80a7 	bne.w	80015e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f002 ffb2 	bl	8004406 <USB_ReadDevAllOutEpInterrupt>
 80014a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014a4:	e099      	b.n	80015da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 808e 	beq.w	80015ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 ffd6 	bl	800446e <USB_ReadDevOutEPInterrupt>
 80014c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00c      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014da:	461a      	mov	r2, r3
 80014dc:	2301      	movs	r3, #1
 80014de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fec2 	bl	800226c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fe:	461a      	mov	r2, r3
 8001500:	2308      	movs	r3, #8
 8001502:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 ff98 	bl	800243c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	015a      	lsls	r2, r3, #5
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001522:	461a      	mov	r2, r3
 8001524:	2310      	movs	r3, #16
 8001526:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d030      	beq.n	8001594 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	2b80      	cmp	r3, #128	; 0x80
 800153c:	d109      	bne.n	8001552 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800154c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001550:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	3304      	adds	r3, #4
 8001566:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	78db      	ldrb	r3, [r3, #3]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2200      	movs	r2, #0
 8001574:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f008 f901 	bl	8009784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158e:	461a      	mov	r2, r3
 8001590:	2302      	movs	r3, #2
 8001592:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015aa:	461a      	mov	r2, r3
 80015ac:	2320      	movs	r3, #32
 80015ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c6:	461a      	mov	r2, r3
 80015c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	3301      	adds	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f47f af62 	bne.w	80014a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fefa 	bl	80043e0 <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015f6:	f040 80db 	bne.w	80017b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 ff1b 	bl	800443a <USB_ReadDevAllInEpInterrupt>
 8001604:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800160a:	e0cd      	b.n	80017a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80c2 	beq.w	800179c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f002 ff41 	bl	80044aa <USB_ReadDevInEPInterrupt>
 8001628:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d057      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	2201      	movs	r2, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	69f9      	ldr	r1, [r7, #28]
 8001650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001654:	4013      	ands	r3, r2
 8001656:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001664:	461a      	mov	r2, r3
 8001666:	2301      	movs	r3, #1
 8001668:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d132      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	334c      	adds	r3, #76	; 0x4c
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4403      	add	r3, r0
 8001692:	3348      	adds	r3, #72	; 0x48
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4419      	add	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4403      	add	r3, r0
 80016a6:	334c      	adds	r3, #76	; 0x4c
 80016a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d113      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x3a2>
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3354      	adds	r3, #84	; 0x54
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d108      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016d0:	461a      	mov	r2, r3
 80016d2:	2101      	movs	r1, #1
 80016d4:	f002 ff48 	bl	8004568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f007 ffcb 	bl	800967a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016fa:	461a      	mov	r2, r3
 80016fc:	2308      	movs	r3, #8
 80016fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001716:	461a      	mov	r2, r3
 8001718:	2310      	movs	r3, #16
 800171a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4413      	add	r3, r2
 800172e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001732:	461a      	mov	r2, r3
 8001734:	2340      	movs	r3, #64	; 0x40
 8001736:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d023      	beq.n	800178a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001744:	6a38      	ldr	r0, [r7, #32]
 8001746:	f001 fe29 	bl	800339c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	3338      	adds	r3, #56	; 0x38
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	3304      	adds	r3, #4
 800175c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	78db      	ldrb	r3, [r3, #3]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2200      	movs	r2, #0
 800176a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f008 f818 	bl	80097a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	015a      	lsls	r2, r3, #5
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001784:	461a      	mov	r2, r3
 8001786:	2302      	movs	r3, #2
 8001788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fcdb 	bl	8002152 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	3301      	adds	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f47f af2e 	bne.w	800160c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fe13 	bl	80043e0 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017c4:	d122      	bne.n	800180c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d108      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017ec:	2100      	movs	r1, #0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 fec2 	bl	8002578 <HAL_PCDEx_LPM_Callback>
 80017f4:	e002      	b.n	80017fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f007 ffb6 	bl	8009768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800180a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fde5 	bl	80043e0 <USB_ReadInterrupts>
 8001816:	4603      	mov	r3, r0
 8001818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001820:	d112      	bne.n	8001848 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f007 ff72 	bl	800971c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001846:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fdc7 	bl	80043e0 <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185c:	f040 80b7 	bne.w	80019ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2110      	movs	r1, #16
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fd8e 	bl	800339c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001884:	e046      	b.n	8001914 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001892:	461a      	mov	r2, r3
 8001894:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001898:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018aa:	0151      	lsls	r1, r2, #5
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	440a      	add	r2, r1
 80018b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c6:	461a      	mov	r2, r3
 80018c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018de:	0151      	lsls	r1, r2, #5
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	440a      	add	r2, r1
 80018e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fe:	0151      	lsls	r1, r2, #5
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	440a      	add	r2, r1
 8001904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001908:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800190c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	3301      	adds	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	429a      	cmp	r2, r3
 800191c:	d3b3      	bcc.n	8001886 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001930:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194a:	f043 030b 	orr.w	r3, r3, #11
 800194e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001960:	f043 030b 	orr.w	r3, r3, #11
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	e015      	b.n	8001994 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800197a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800197e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198e:	f043 030b 	orr.w	r3, r3, #11
 8001992:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b8:	461a      	mov	r2, r3
 80019ba:	f002 fdd5 	bl	8004568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fd04 	bl	80043e0 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e2:	d124      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fd9a 	bl	8004522 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fd4f 	bl	8003496 <USB_GetDevSpeed>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681c      	ldr	r4, [r3, #0]
 8001a04:	f001 f9e8 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8001a08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4620      	mov	r0, r4
 8001a14:	f001 fa4e 	bl	8002eb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f007 fe56 	bl	80096ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fcd4 	bl	80043e0 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d10a      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f007 fe33 	bl	80096ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f002 0208 	and.w	r2, r2, #8
 8001a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fcbf 	bl	80043e0 <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d122      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a78:	2301      	movs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	e014      	b.n	8001aa8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d105      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fb27 	bl	80020f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3e5      	bcc.n	8001a7e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 fc92 	bl	80043e0 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ac6:	d13b      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
 8001acc:	e02b      	b.n	8001b26 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3340      	adds	r3, #64	; 0x40
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d115      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001af4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da12      	bge.n	8001b20 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	333f      	adds	r3, #63	; 0x3f
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fae8 	bl	80020f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	3301      	adds	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3ce      	bcc.n	8001ace <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 fc4b 	bl	80043e0 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b54:	d155      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	e045      	b.n	8001be8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d12e      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da2b      	bge.n	8001be2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d121      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10a      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6053      	str	r3, [r2, #4]
            break;
 8001be0:	e007      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3b4      	bcc.n	8001b5c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fbea 	bl	80043e0 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c16:	d10a      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f007 fdd7 	bl	80097cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fbd4 	bl	80043e0 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d115      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f007 fdc7 	bl	80097e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	e000      	b.n	8001c6e <HAL_PCD_IRQHandler+0x938>
      return;
 8001c6c:	bf00      	nop
    }
  }
}
 8001c6e:	3734      	adds	r7, #52	; 0x34
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_SetAddress+0x1a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e013      	b.n	8001cb6 <HAL_PCD_SetAddress+0x42>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fb32 	bl	8004310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	4608      	mov	r0, r1
 8001cc8:	4611      	mov	r1, r2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	70fb      	strb	r3, [r7, #3]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	803b      	strh	r3, [r7, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da0f      	bge.n	8001d04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 020f 	and.w	r2, r3, #15
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	3338      	adds	r3, #56	; 0x38
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	705a      	strb	r2, [r3, #1]
 8001d02:	e00f      	b.n	8001d24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d30:	883a      	ldrh	r2, [r7, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	78ba      	ldrb	r2, [r7, #2]
 8001d3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d102      	bne.n	8001d5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_EP_Open+0xaa>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_EP_Open+0xc8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fbb2 	bl	80034e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d84:	7afb      	ldrb	r3, [r7, #11]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0f      	bge.n	8001dc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	3338      	adds	r3, #56	; 0x38
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	705a      	strb	r2, [r3, #1]
 8001dc0:	e00f      	b.n	8001de2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_PCD_EP_Close+0x6e>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e00e      	b.n	8001e1a <HAL_PCD_EP_Close+0x8c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 fbf0 	bl	80035f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	f001 fecf 	bl	8003c38 <USB_EP0StartXfer>
 8001e9a:	e008      	b.n	8001eae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6979      	ldr	r1, [r7, #20]
 8001eaa:	f001 fc7d 	bl	80037a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	3338      	adds	r3, #56	; 0x38
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2201      	movs	r2, #1
 8001f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d102      	bne.n	8001f42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	6979      	ldr	r1, [r7, #20]
 8001f5a:	f001 fe6d 	bl	8003c38 <USB_EP0StartXfer>
 8001f5e:	e008      	b.n	8001f72 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6979      	ldr	r1, [r7, #20]
 8001f6e:	f001 fc1b 	bl	80037a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d901      	bls.n	8001f9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e050      	b.n	800203c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da0f      	bge.n	8001fc2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3338      	adds	r3, #56	; 0x38
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	705a      	strb	r2, [r3, #1]
 8001fc0:	e00d      	b.n	8001fde <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_EP_SetStall+0x82>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e01e      	b.n	800203c <HAL_PCD_EP_SetStall+0xc0>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f8ab 	bl	8004168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	b2d9      	uxtb	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800202c:	461a      	mov	r2, r3
 800202e:	f002 fa9b 	bl	8004568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d901      	bls.n	8002062 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e042      	b.n	80020e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	da0f      	bge.n	800208a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	3338      	adds	r3, #56	; 0x38
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	3304      	adds	r3, #4
 8002080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
 8002088:	e00f      	b.n	80020aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_PCD_EP_ClrStall+0x86>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e00e      	b.n	80020e8 <HAL_PCD_EP_ClrStall+0xa4>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 f8b3 	bl	8004244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002100:	2b00      	cmp	r3, #0
 8002102:	da0c      	bge.n	800211e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 020f 	and.w	r2, r3, #15
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3338      	adds	r3, #56	; 0x38
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e00c      	b.n	8002138 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f001 fed2 	bl	8003ee8 <USB_EPStopXfer>
 8002144:	4603      	mov	r3, r0
 8002146:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002148:	7afb      	ldrb	r3, [r7, #11]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b08a      	sub	sp, #40	; 0x28
 8002156:	af02      	add	r7, sp, #8
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	3338      	adds	r3, #56	; 0x38
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	3304      	adds	r3, #4
 8002178:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1a      	ldr	r2, [r3, #32]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	429a      	cmp	r2, r3
 8002184:	d901      	bls.n	800218a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06c      	b.n	8002264 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	d902      	bls.n	80021a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3303      	adds	r3, #3
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ae:	e02b      	b.n	8002208 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d902      	bls.n	80021cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	3303      	adds	r3, #3
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4603      	mov	r3, r0
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f001 ff26 	bl	800403c <USB_WritePacket>

    ep->xfer_buff  += len;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	441a      	add	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a1a      	ldr	r2, [r3, #32]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	441a      	add	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	b29b      	uxth	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	429a      	cmp	r2, r3
 800221c:	d809      	bhi.n	8002232 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1a      	ldr	r2, [r3, #32]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002226:	429a      	cmp	r2, r3
 8002228:	d203      	bcs.n	8002232 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1be      	bne.n	80021b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	429a      	cmp	r2, r3
 800223c:	d811      	bhi.n	8002262 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	2201      	movs	r2, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	43db      	mvns	r3, r3
 8002258:	6939      	ldr	r1, [r7, #16]
 800225a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800225e:	4013      	ands	r3, r2
 8002260:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	333c      	adds	r3, #60	; 0x3c
 8002284:	3304      	adds	r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d17b      	bne.n	800239a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	4a61      	ldr	r2, [pc, #388]	; (8002434 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	f240 80b9 	bls.w	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80b3 	beq.w	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	461a      	mov	r2, r3
 80022d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d4:	6093      	str	r3, [r2, #8]
 80022d6:	e0a7      	b.n	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	461a      	mov	r2, r3
 80022f0:	2320      	movs	r3, #32
 80022f2:	6093      	str	r3, [r2, #8]
 80022f4:	e098      	b.n	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 8093 	bne.w	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d90f      	bls.n	800232a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	e07e      	b.n	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	3304      	adds	r3, #4
 800233e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	0159      	lsls	r1, r3, #5
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	440b      	add	r3, r1
 800234c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	1ad2      	subs	r2, r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d114      	bne.n	800238c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002374:	461a      	mov	r2, r3
 8002376:	2101      	movs	r1, #1
 8002378:	f002 f8f6 	bl	8004568 <USB_EP0_OutStart>
 800237c:	e006      	b.n	800238c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	441a      	add	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f007 f956 	bl	8009644 <HAL_PCD_DataOutStageCallback>
 8002398:	e046      	b.n	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4a26      	ldr	r2, [pc, #152]	; (8002438 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d124      	bne.n	80023ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023be:	6093      	str	r3, [r2, #8]
 80023c0:	e032      	b.n	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	461a      	mov	r2, r3
 80023da:	2320      	movs	r3, #32
 80023dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f007 f92d 	bl	8009644 <HAL_PCD_DataOutStageCallback>
 80023ea:	e01d      	b.n	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d114      	bne.n	800241c <PCD_EP_OutXfrComplete_int+0x1b0>
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002414:	461a      	mov	r2, r3
 8002416:	2100      	movs	r1, #0
 8002418:	f002 f8a6 	bl	8004568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f007 f90e 	bl	8009644 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	4f54300a 	.word	0x4f54300a
 8002438:	4f54310a 	.word	0x4f54310a

0800243c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	333c      	adds	r3, #60	; 0x3c
 8002454:	3304      	adds	r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d90e      	bls.n	8002490 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f007 f8c5 	bl	8009620 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d90c      	bls.n	80024b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024b0:	461a      	mov	r2, r3
 80024b2:	2101      	movs	r1, #1
 80024b4:	f002 f858 	bl	8004568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	4f54300a 	.word	0x4f54300a

080024c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
 80024d4:	4613      	mov	r3, r2
 80024d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d107      	bne.n	80024f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024e6:	883b      	ldrh	r3, [r7, #0]
 80024e8:	0419      	lsls	r1, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
 80024f4:	e028      	b.n	8002548 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	4413      	add	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e00d      	b.n	8002526 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	3340      	adds	r3, #64	; 0x40
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4413      	add	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3301      	adds	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	3b01      	subs	r3, #1
 800252c:	429a      	cmp	r2, r3
 800252e:	d3ec      	bcc.n	800250a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002530:	883b      	ldrh	r3, [r7, #0]
 8002532:	0418      	lsls	r0, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	3b01      	subs	r3, #1
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	4302      	orrs	r2, r0
 8002540:	3340      	adds	r3, #64	; 0x40
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e267      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d075      	beq.n	800269a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d112      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d2:	d10b      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <HAL_RCC_OscConfig+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d157      	bne.n	8002698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e242      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x74>
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002628:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fa2e 	bl	8000aa8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fa2a 	bl	8000aa8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e207      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xc0>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fa1a 	bl	8000aa8 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe fa16 	bl	8000aa8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1f3      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0xe8>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1c7      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe f9cf 	bl	8000aa8 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe f9cb 	bl	8000aa8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1a8      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe f9ae 	bl	8000aa8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe f9aa 	bl	8000aa8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e187      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe f98e 	bl	8000aa8 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe f98a 	bl	8000aa8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e167      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x200>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe f977 	bl	8000aa8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe f973 	bl	8000aa8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e150      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b77      	ldr	r3, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b74      	ldr	r3, [pc, #464]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe f933 	bl	8000aa8 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7fe f92f 	bl	8000aa8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e10c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x2ea>
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a63      	ldr	r2, [pc, #396]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x30c>
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800289c:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe f8f4 	bl	8000aa8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe f8f0 	bl	8000aa8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0cb      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7fe f8de 	bl	8000aa8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe f8da 	bl	8000aa8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0b5      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a1 	beq.w	8002a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d05c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d141      	bne.n	80029c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe f8ae 	bl	8000aa8 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe f8aa 	bl	8000aa8 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e087      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	491b      	ldr	r1, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe f883 	bl	8000aa8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe f87f 	bl	8000aa8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e05c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x416>
 80029c4:	e054      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe f86c 	bl	8000aa8 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe f868 	bl	8000aa8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e045      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
 80029f2:	e03d      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e038      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d028      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d121      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11a      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cc      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d90c      	bls.n	8002abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d044      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d119      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e067      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4934      	ldr	r1, [pc, #208]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7fd ff9a 	bl	8000aa8 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fd ff96 	bl	8000aa8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d20c      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fefa 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	08009ea0 	.word	0x08009ea0
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b090      	sub	sp, #64	; 0x40
 8002c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d00d      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x40>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	f200 80a1 	bhi.w	8002db8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7e:	e09b      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c84:	e09b      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c86:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c8a:	e098      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c96:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d028      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	627a      	str	r2, [r7, #36]	; 0x24
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb8:	fb03 f201 	mul.w	r2, r3, r1
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a43      	ldr	r2, [pc, #268]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8002cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ccc:	460a      	mov	r2, r1
 8002cce:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	4413      	add	r3, r2
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	2200      	movs	r2, #0
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	61fa      	str	r2, [r7, #28]
 8002cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ce6:	f7fd fa73 	bl	80001d0 <__aeabi_uldivmod>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4613      	mov	r3, r2
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf2:	e053      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf4:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	617a      	str	r2, [r7, #20]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d06:	f04f 0b00 	mov.w	fp, #0
 8002d0a:	4652      	mov	r2, sl
 8002d0c:	465b      	mov	r3, fp
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	0159      	lsls	r1, r3, #5
 8002d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d1c:	0150      	lsls	r0, r2, #5
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	ebb2 080a 	subs.w	r8, r2, sl
 8002d26:	eb63 090b 	sbc.w	r9, r3, fp
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d3e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d42:	eb63 0509 	sbc.w	r5, r3, r9
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	00eb      	lsls	r3, r5, #3
 8002d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d54:	00e2      	lsls	r2, r4, #3
 8002d56:	4614      	mov	r4, r2
 8002d58:	461d      	mov	r5, r3
 8002d5a:	eb14 030a 	adds.w	r3, r4, sl
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	eb45 030b 	adc.w	r3, r5, fp
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d72:	4629      	mov	r1, r5
 8002d74:	028b      	lsls	r3, r1, #10
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	028a      	lsls	r2, r1, #10
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	2200      	movs	r2, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	60fa      	str	r2, [r7, #12]
 8002d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d90:	f7fd fa1e 	bl	80001d0 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	3301      	adds	r3, #1
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002db6:	e002      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3740      	adds	r7, #64	; 0x40
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	00b71b00 	.word	0x00b71b00

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_RCC_GetHCLKFreq+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000000 	.word	0x20000000

08002df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002df0:	b084      	sub	sp, #16
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	f107 001c 	add.w	r0, r7, #28
 8002dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d122      	bne.n	8002e4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f001 fbee 	bl	8004624 <USB_CoreReset>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e01a      	b.n	8002e84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f001 fbe2 	bl	8004624 <USB_CoreReset>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
 8002e76:	e005      	b.n	8002e84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10b      	bne.n	8002ea2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f043 0206 	orr.w	r2, r3, #6
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eae:	b004      	add	sp, #16
 8002eb0:	4770      	bx	lr
	...

08002eb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d165      	bne.n	8002f94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <USB_SetTurnaroundTime+0x11c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d906      	bls.n	8002ede <USB_SetTurnaroundTime+0x2a>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <USB_SetTurnaroundTime+0x120>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d202      	bcs.n	8002ede <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ed8:	230f      	movs	r3, #15
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e062      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4a3c      	ldr	r2, [pc, #240]	; (8002fd4 <USB_SetTurnaroundTime+0x120>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d306      	bcc.n	8002ef4 <USB_SetTurnaroundTime+0x40>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <USB_SetTurnaroundTime+0x124>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d202      	bcs.n	8002ef4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002eee:	230e      	movs	r3, #14
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e057      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a38      	ldr	r2, [pc, #224]	; (8002fd8 <USB_SetTurnaroundTime+0x124>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d306      	bcc.n	8002f0a <USB_SetTurnaroundTime+0x56>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4a37      	ldr	r2, [pc, #220]	; (8002fdc <USB_SetTurnaroundTime+0x128>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d202      	bcs.n	8002f0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f04:	230d      	movs	r3, #13
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e04c      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4a33      	ldr	r2, [pc, #204]	; (8002fdc <USB_SetTurnaroundTime+0x128>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d306      	bcc.n	8002f20 <USB_SetTurnaroundTime+0x6c>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4a32      	ldr	r2, [pc, #200]	; (8002fe0 <USB_SetTurnaroundTime+0x12c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d802      	bhi.n	8002f20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e041      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a2f      	ldr	r2, [pc, #188]	; (8002fe0 <USB_SetTurnaroundTime+0x12c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d906      	bls.n	8002f36 <USB_SetTurnaroundTime+0x82>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <USB_SetTurnaroundTime+0x130>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d802      	bhi.n	8002f36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f30:	230b      	movs	r3, #11
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e036      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4a2a      	ldr	r2, [pc, #168]	; (8002fe4 <USB_SetTurnaroundTime+0x130>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d906      	bls.n	8002f4c <USB_SetTurnaroundTime+0x98>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <USB_SetTurnaroundTime+0x134>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d802      	bhi.n	8002f4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f46:	230a      	movs	r3, #10
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e02b      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <USB_SetTurnaroundTime+0x134>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d906      	bls.n	8002f62 <USB_SetTurnaroundTime+0xae>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4a25      	ldr	r2, [pc, #148]	; (8002fec <USB_SetTurnaroundTime+0x138>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d202      	bcs.n	8002f62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f5c:	2309      	movs	r3, #9
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e020      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <USB_SetTurnaroundTime+0x138>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d306      	bcc.n	8002f78 <USB_SetTurnaroundTime+0xc4>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <USB_SetTurnaroundTime+0x13c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d802      	bhi.n	8002f78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f72:	2308      	movs	r3, #8
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e015      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <USB_SetTurnaroundTime+0x13c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d906      	bls.n	8002f8e <USB_SetTurnaroundTime+0xda>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <USB_SetTurnaroundTime+0x140>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d202      	bcs.n	8002f8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e00a      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f8e:	2306      	movs	r3, #6
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e007      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f9a:	2309      	movs	r3, #9
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e001      	b.n	8002fa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002fa0:	2309      	movs	r3, #9
 8002fa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	029b      	lsls	r3, r3, #10
 8002fb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	00d8acbf 	.word	0x00d8acbf
 8002fd4:	00e4e1c0 	.word	0x00e4e1c0
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	01067380 	.word	0x01067380
 8002fe0:	011a499f 	.word	0x011a499f
 8002fe4:	01312cff 	.word	0x01312cff
 8002fe8:	014ca43f 	.word	0x014ca43f
 8002fec:	016e3600 	.word	0x016e3600
 8002ff0:	01a6ab1f 	.word	0x01a6ab1f
 8002ff4:	01e84800 	.word	0x01e84800

08002ff8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 0201 	bic.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d115      	bne.n	800308a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800306a:	2001      	movs	r0, #1
 800306c:	f7fd fd28 	bl	8000ac0 <HAL_Delay>
      ms++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3301      	adds	r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f001 fa45 	bl	8004506 <USB_GetMode>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d01e      	beq.n	80030c0 <USB_SetCurrentMode+0x84>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b31      	cmp	r3, #49	; 0x31
 8003086:	d9f0      	bls.n	800306a <USB_SetCurrentMode+0x2e>
 8003088:	e01a      	b.n	80030c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d115      	bne.n	80030bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800309c:	2001      	movs	r0, #1
 800309e:	f7fd fd0f 	bl	8000ac0 <HAL_Delay>
      ms++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f001 fa2c 	bl	8004506 <USB_GetMode>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <USB_SetCurrentMode+0x84>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b31      	cmp	r3, #49	; 0x31
 80030b8:	d9f0      	bls.n	800309c <USB_SetCurrentMode+0x60>
 80030ba:	e001      	b.n	80030c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e005      	b.n	80030cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b32      	cmp	r3, #50	; 0x32
 80030c4:	d101      	bne.n	80030ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d4:	b084      	sub	sp, #16
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e009      	b.n	8003108 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3340      	adds	r3, #64	; 0x40
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3301      	adds	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b0e      	cmp	r3, #14
 800310c:	d9f2      	bls.n	80030f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11c      	bne.n	800314e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	639a      	str	r2, [r3, #56]	; 0x38
 800314c:	e00b      	b.n	8003166 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800316c:	461a      	mov	r2, r3
 800316e:	2300      	movs	r3, #0
 8003170:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003178:	4619      	mov	r1, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003180:	461a      	mov	r2, r3
 8003182:	680b      	ldr	r3, [r1, #0]
 8003184:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10c      	bne.n	80031a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d104      	bne.n	800319c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003192:	2100      	movs	r1, #0
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f965 	bl	8003464 <USB_SetDevSpeed>
 800319a:	e008      	b.n	80031ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800319c:	2101      	movs	r1, #1
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f960 	bl	8003464 <USB_SetDevSpeed>
 80031a4:	e003      	b.n	80031ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031a6:	2103      	movs	r1, #3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f95b 	bl	8003464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031ae:	2110      	movs	r1, #16
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8f3 	bl	800339c <USB_FlushTxFifo>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f91f 	bl	8003404 <USB_FlushRxFifo>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d6:	461a      	mov	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e2:	461a      	mov	r2, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ee:	461a      	mov	r2, r3
 80031f0:	2300      	movs	r3, #0
 80031f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e043      	b.n	8003282 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800320c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003210:	d118      	bne.n	8003244 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003224:	461a      	mov	r2, r3
 8003226:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e013      	b.n	8003256 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323a:	461a      	mov	r2, r3
 800323c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e008      	b.n	8003256 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003250:	461a      	mov	r2, r3
 8003252:	2300      	movs	r3, #0
 8003254:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003262:	461a      	mov	r2, r3
 8003264:	2300      	movs	r3, #0
 8003266:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003274:	461a      	mov	r2, r3
 8003276:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800327a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	3301      	adds	r3, #1
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3b7      	bcc.n	80031fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e043      	b.n	8003318 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a6:	d118      	bne.n	80032da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e013      	b.n	80032ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d0:	461a      	mov	r2, r3
 80032d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e008      	b.n	80032ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	2300      	movs	r3, #0
 80032ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	2300      	movs	r3, #0
 80032fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330a:	461a      	mov	r2, r3
 800330c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003310:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	3301      	adds	r3, #1
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	429a      	cmp	r2, r3
 800331e:	d3b7      	bcc.n	8003290 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003332:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003340:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f043 0210 	orr.w	r2, r3, #16
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <USB_DevInit+0x2c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f043 0208 	orr.w	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003394:	b004      	add	sp, #16
 8003396:	4770      	bx	lr
 8003398:	803c3800 	.word	0x803c3800

0800339c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a13      	ldr	r2, [pc, #76]	; (8003400 <USB_FlushTxFifo+0x64>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e01b      	b.n	80033f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	daf2      	bge.n	80033aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	019b      	lsls	r3, r3, #6
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a08      	ldr	r2, [pc, #32]	; (8003400 <USB_FlushTxFifo+0x64>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e006      	b.n	80033f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d0f0      	beq.n	80033d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	00030d40 	.word	0x00030d40

08003404 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <USB_FlushRxFifo+0x5c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e018      	b.n	8003454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	daf2      	bge.n	8003410 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2210      	movs	r2, #16
 8003432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <USB_FlushRxFifo+0x5c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e006      	b.n	8003454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b10      	cmp	r3, #16
 8003450:	d0f0      	beq.n	8003434 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	00030d40 	.word	0x00030d40

08003464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0306 	and.w	r3, r3, #6
 80034ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
 80034ba:	e00a      	b.n	80034d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d002      	beq.n	80034c8 <USB_GetDevSpeed+0x32>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d102      	bne.n	80034ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80034c8:	2302      	movs	r3, #2
 80034ca:	75fb      	strb	r3, [r7, #23]
 80034cc:	e001      	b.n	80034d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80034ce:	230f      	movs	r3, #15
 80034d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d13a      	bne.n	8003572 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	b29b      	uxth	r3, r3
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800351a:	4313      	orrs	r3, r2
 800351c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d155      	bne.n	80035e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	791b      	ldrb	r3, [r3, #4]
 800354e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003550:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	059b      	lsls	r3, r3, #22
 8003556:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003558:	4313      	orrs	r3, r2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	440a      	add	r2, r1
 8003562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e036      	b.n	80035e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003590:	4313      	orrs	r3, r2
 8003592:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11a      	bne.n	80035e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	791b      	ldrb	r3, [r3, #4]
 80035c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035c6:	430b      	orrs	r3, r1
 80035c8:	4313      	orrs	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d161      	bne.n	80036d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800361e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003622:	d11f      	bne.n	8003664 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003642:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	b29b      	uxth	r3, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003684:	4013      	ands	r3, r2
 8003686:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	b29b      	uxth	r3, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a8:	4013      	ands	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0159      	lsls	r1, r3, #5
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	4619      	mov	r1, r3
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <USB_DeactivateEndpoint+0x1b0>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
 80036ce:	e060      	b.n	8003792 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e6:	d11f      	bne.n	8003728 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003706:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	0151      	lsls	r1, r2, #5
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	440a      	add	r2, r1
 800371e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	43db      	mvns	r3, r3
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003748:	4013      	ands	r3, r2
 800374a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	43db      	mvns	r3, r3
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800376c:	4013      	ands	r3, r2
 800376e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	0159      	lsls	r1, r3, #5
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	440b      	add	r3, r1
 8003786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378a:	4619      	mov	r1, r3
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <USB_DeactivateEndpoint+0x1b4>)
 800378e:	4013      	ands	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	ec337800 	.word	0xec337800
 80037a4:	eff37800 	.word	0xeff37800

080037a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 815c 	bne.w	8003a82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d132      	bne.n	8003838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	0151      	lsls	r1, r2, #5
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	440a      	add	r2, r1
 80037e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	440a      	add	r2, r1
 800380c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003830:	0cdb      	lsrs	r3, r3, #19
 8003832:	04db      	lsls	r3, r3, #19
 8003834:	6113      	str	r3, [r2, #16]
 8003836:	e074      	b.n	8003922 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	0151      	lsls	r1, r2, #5
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	440a      	add	r2, r1
 800384e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003852:	0cdb      	lsrs	r3, r3, #19
 8003854:	04db      	lsls	r3, r3, #19
 8003856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	440a      	add	r2, r1
 800386e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800387a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003888:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	440b      	add	r3, r1
 8003894:	1e59      	subs	r1, r3, #1
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	fbb1 f3f3 	udiv	r3, r1, r3
 800389e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038a0:	4b9d      	ldr	r3, [pc, #628]	; (8003b18 <USB_EPStartXfer+0x370>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	0148      	lsls	r0, r1, #5
 80038a8:	69f9      	ldr	r1, [r7, #28]
 80038aa:	4401      	add	r1, r0
 80038ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	69b9      	ldr	r1, [r7, #24]
 80038cc:	0148      	lsls	r0, r1, #5
 80038ce:	69f9      	ldr	r1, [r7, #28]
 80038d0:	4401      	add	r1, r0
 80038d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038d6:	4313      	orrs	r3, r2
 80038d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	791b      	ldrb	r3, [r3, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d11f      	bne.n	8003922 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003900:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	440a      	add	r2, r1
 8003918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003920:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d14b      	bne.n	80039c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	791b      	ldrb	r3, [r3, #4]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d128      	bne.n	800399e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	440a      	add	r2, r1
 8003972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e00f      	b.n	800399e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	440a      	add	r2, r1
 8003994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e133      	b.n	8003c28 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	791b      	ldrb	r3, [r3, #4]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d015      	beq.n	8003a14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 811b 	beq.w	8003c28 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	69f9      	ldr	r1, [r7, #28]
 8003a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	634b      	str	r3, [r1, #52]	; 0x34
 8003a12:	e109      	b.n	8003c28 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d110      	bne.n	8003a46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e00f      	b.n	8003a66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	6919      	ldr	r1, [r3, #16]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	b298      	uxth	r0, r3
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4603      	mov	r3, r0
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fade 	bl	800403c <USB_WritePacket>
 8003a80:	e0d2      	b.n	8003c28 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a9c:	0cdb      	lsrs	r3, r3, #19
 8003a9e:	04db      	lsls	r3, r3, #19
 8003aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ac4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d126      	bne.n	8003b1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	0148      	lsls	r0, r1, #5
 8003ae8:	69f9      	ldr	r1, [r7, #28]
 8003aea:	4401      	add	r1, r0
 8003aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003af0:	4313      	orrs	r3, r2
 8003af2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	0151      	lsls	r1, r2, #5
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	440a      	add	r2, r1
 8003b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b12:	6113      	str	r3, [r2, #16]
 8003b14:	e03a      	b.n	8003b8c <USB_EPStartXfer+0x3e4>
 8003b16:	bf00      	nop
 8003b18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4413      	add	r3, r2
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	8afa      	ldrh	r2, [r7, #22]
 8003b38:	fb03 f202 	mul.w	r2, r3, r2
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	04d9      	lsls	r1, r3, #19
 8003b52:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <USB_EPStartXfer+0x48c>)
 8003b54:	400b      	ands	r3, r1
 8003b56:	69b9      	ldr	r1, [r7, #24]
 8003b58:	0148      	lsls	r0, r1, #5
 8003b5a:	69f9      	ldr	r1, [r7, #28]
 8003b5c:	4401      	add	r1, r0
 8003b5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	0148      	lsls	r0, r1, #5
 8003b80:	69f9      	ldr	r1, [r7, #28]
 8003b82:	4401      	add	r1, r0
 8003b84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10d      	bne.n	8003bae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6919      	ldr	r1, [r3, #16]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	460a      	mov	r2, r1
 8003bac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	791b      	ldrb	r3, [r3, #4]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d128      	bne.n	8003c08 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d110      	bne.n	8003be8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e00f      	b.n	8003c08 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	1ff80000 	.word	0x1ff80000

08003c38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	f040 80ce 	bne.w	8003df6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d132      	bne.n	8003cc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	0151      	lsls	r1, r2, #5
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	440a      	add	r2, r1
 8003c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc0:	0cdb      	lsrs	r3, r3, #19
 8003cc2:	04db      	lsls	r3, r3, #19
 8003cc4:	6113      	str	r3, [r2, #16]
 8003cc6:	e04e      	b.n	8003d66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce2:	0cdb      	lsrs	r3, r3, #19
 8003ce4:	04db      	lsls	r3, r3, #19
 8003ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d903      	bls.n	8003d20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d56:	6939      	ldr	r1, [r7, #16]
 8003d58:	0148      	lsls	r0, r1, #5
 8003d5a:	6979      	ldr	r1, [r7, #20]
 8003d5c:	4401      	add	r1, r0
 8003d5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d62:	4313      	orrs	r3, r2
 8003d64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d11e      	bne.n	8003daa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	e097      	b.n	8003eda <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8083 	beq.w	8003eda <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df0:	4313      	orrs	r3, r2
 8003df2:	634b      	str	r3, [r1, #52]	; 0x34
 8003df4:	e071      	b.n	8003eda <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e10:	0cdb      	lsrs	r3, r3, #19
 8003e12:	04db      	lsls	r3, r3, #19
 8003e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e88:	6939      	ldr	r1, [r7, #16]
 8003e8a:	0148      	lsls	r0, r1, #5
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	4401      	add	r1, r0
 8003e90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e94:	4313      	orrs	r3, r2
 8003e96:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10d      	bne.n	8003eba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6919      	ldr	r1, [r3, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	460a      	mov	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ed4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ed8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d14a      	bne.n	8003f9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f1e:	f040 8086 	bne.w	800402e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d902      	bls.n	8003f80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8003f7e:	e056      	b.n	800402e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f98:	d0e7      	beq.n	8003f6a <USB_EPStopXfer+0x82>
 8003f9a:	e048      	b.n	800402e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb4:	d13b      	bne.n	800402e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f242 7210 	movw	r2, #10000	; 0x2710
 800400a:	4293      	cmp	r3, r2
 800400c:	d902      	bls.n	8004014 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
          break;
 8004012:	e00c      	b.n	800402e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800402c:	d0e7      	beq.n	8003ffe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800402e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004030:	4618      	mov	r0, r3
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800403c:	b480      	push	{r7}
 800403e:	b089      	sub	sp, #36	; 0x24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	4611      	mov	r1, r2
 8004048:	461a      	mov	r2, r3
 800404a:	460b      	mov	r3, r1
 800404c:	71fb      	strb	r3, [r7, #7]
 800404e:	4613      	mov	r3, r2
 8004050:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800405a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800405e:	2b00      	cmp	r3, #0
 8004060:	d123      	bne.n	80040aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004062:	88bb      	ldrh	r3, [r7, #4]
 8004064:	3303      	adds	r3, #3
 8004066:	089b      	lsrs	r3, r3, #2
 8004068:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	e018      	b.n	80040a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	031a      	lsls	r2, r3, #12
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4413      	add	r3, r2
 8004078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407c:	461a      	mov	r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	3301      	adds	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	3301      	adds	r3, #1
 800409a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	3301      	adds	r3, #1
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3e2      	bcc.n	8004070 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3724      	adds	r7, #36	; 0x24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b08b      	sub	sp, #44	; 0x2c
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
 80040e2:	e014      	b.n	800410e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	3301      	adds	r3, #1
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	3301      	adds	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	3301      	adds	r3, #1
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	3301      	adds	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	3301      	adds	r3, #1
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	429a      	cmp	r2, r3
 8004114:	d3e6      	bcc.n	80040e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004116:	8bfb      	ldrh	r3, [r7, #30]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01e      	beq.n	800415a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004126:	461a      	mov	r2, r3
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	b2da      	uxtb	r2, r3
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	701a      	strb	r2, [r3, #0]
      i++;
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	3301      	adds	r3, #1
 8004146:	623b      	str	r3, [r7, #32]
      pDest++;
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	3301      	adds	r3, #1
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800414e:	8bfb      	ldrh	r3, [r7, #30]
 8004150:	3b01      	subs	r3, #1
 8004152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004154:	8bfb      	ldrh	r3, [r7, #30]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ea      	bne.n	8004130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800415c:	4618      	mov	r0, r3
 800415e:	372c      	adds	r7, #44	; 0x2c
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d12c      	bne.n	80041de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	db12      	blt.n	80041bc <USB_EPSetStall+0x54>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00f      	beq.n	80041bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e02b      	b.n	8004236 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db12      	blt.n	8004216 <USB_EPSetStall+0xae>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00f      	beq.n	8004216 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	440a      	add	r2, r1
 800420c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004214:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d128      	bne.n	80042b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800427e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d003      	beq.n	8004290 <USB_EPClearStall+0x4c>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	791b      	ldrb	r3, [r3, #4]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d138      	bne.n	8004302 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e027      	b.n	8004302 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	791b      	ldrb	r3, [r3, #4]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d003      	beq.n	80042e2 <USB_EPClearStall+0x9e>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	791b      	ldrb	r3, [r3, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d10f      	bne.n	8004302 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004332:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004344:	68f9      	ldr	r1, [r7, #12]
 8004346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438a:	f023 0302 	bic.w	r3, r3, #2
 800438e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043b8:	f023 0303 	bic.w	r3, r3, #3
 80043bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043f8:	68fb      	ldr	r3, [r7, #12]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	0c1b      	lsrs	r3, r3, #16
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	4013      	ands	r3, r2
 800445c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	b29b      	uxth	r3, r3
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800449c:	68bb      	ldr	r3, [r7, #8]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b087      	sub	sp, #28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	01db      	lsls	r3, r3, #7
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044f8:	68bb      	ldr	r3, [r7, #8]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004540:	f023 0307 	bic.w	r3, r3, #7
 8004544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	460b      	mov	r3, r1
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	333c      	adds	r3, #60	; 0x3c
 800457e:	3304      	adds	r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4a26      	ldr	r2, [pc, #152]	; (8004620 <USB_EP0_OutStart+0xb8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d90a      	bls.n	80045a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800459c:	d101      	bne.n	80045a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e037      	b.n	8004612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	461a      	mov	r2, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d0:	f043 0318 	orr.w	r3, r3, #24
 80045d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80045e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80045ea:	7afb      	ldrb	r3, [r7, #11]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10f      	bne.n	8004610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800460e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	4f54300a 	.word	0x4f54300a

08004624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <USB_CoreReset+0x64>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e01b      	b.n	800467a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	daf2      	bge.n	8004630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f043 0201 	orr.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3301      	adds	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <USB_CoreReset+0x64>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e006      	b.n	800467a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d0f0      	beq.n	800465a <USB_CoreReset+0x36>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	00030d40 	.word	0x00030d40

0800468c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004698:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800469c:	f005 fa3c 	bl	8009b18 <USBD_static_malloc>
 80046a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	32b0      	adds	r2, #176	; 0xb0
 80046b2:	2100      	movs	r1, #0
 80046b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80046b8:	2302      	movs	r3, #2
 80046ba:	e0d4      	b.n	8004866 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80046bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80046c0:	2100      	movs	r1, #0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f005 fac6 	bl	8009c54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	32b0      	adds	r2, #176	; 0xb0
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	32b0      	adds	r2, #176	; 0xb0
 80046e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7c1b      	ldrb	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d138      	bne.n	8004766 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80046f4:	4b5e      	ldr	r3, [pc, #376]	; (8004870 <USBD_CDC_Init+0x1e4>)
 80046f6:	7819      	ldrb	r1, [r3, #0]
 80046f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fc:	2202      	movs	r2, #2
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f005 f8e7 	bl	80098d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004704:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <USBD_CDC_Init+0x1e4>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	3324      	adds	r3, #36	; 0x24
 800471a:	2201      	movs	r2, #1
 800471c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800471e:	4b55      	ldr	r3, [pc, #340]	; (8004874 <USBD_CDC_Init+0x1e8>)
 8004720:	7819      	ldrb	r1, [r3, #0]
 8004722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004726:	2202      	movs	r2, #2
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f005 f8d2 	bl	80098d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800472e:	4b51      	ldr	r3, [pc, #324]	; (8004874 <USBD_CDC_Init+0x1e8>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f003 020f 	and.w	r2, r3, #15
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004746:	2201      	movs	r2, #1
 8004748:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800474a:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <USBD_CDC_Init+0x1ec>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f003 020f 	and.w	r2, r3, #15
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	3326      	adds	r3, #38	; 0x26
 8004760:	2210      	movs	r2, #16
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	e035      	b.n	80047d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004766:	4b42      	ldr	r3, [pc, #264]	; (8004870 <USBD_CDC_Init+0x1e4>)
 8004768:	7819      	ldrb	r1, [r3, #0]
 800476a:	2340      	movs	r3, #64	; 0x40
 800476c:	2202      	movs	r2, #2
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f005 f8af 	bl	80098d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004774:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <USBD_CDC_Init+0x1e4>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f003 020f 	and.w	r2, r3, #15
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3324      	adds	r3, #36	; 0x24
 800478a:	2201      	movs	r2, #1
 800478c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <USBD_CDC_Init+0x1e8>)
 8004790:	7819      	ldrb	r1, [r3, #0]
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	2202      	movs	r2, #2
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f005 f89b 	bl	80098d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800479c:	4b35      	ldr	r3, [pc, #212]	; (8004874 <USBD_CDC_Init+0x1e8>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047b4:	2201      	movs	r2, #1
 80047b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <USBD_CDC_Init+0x1ec>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3326      	adds	r3, #38	; 0x26
 80047ce:	2210      	movs	r2, #16
 80047d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80047d2:	4b29      	ldr	r3, [pc, #164]	; (8004878 <USBD_CDC_Init+0x1ec>)
 80047d4:	7819      	ldrb	r1, [r3, #0]
 80047d6:	2308      	movs	r3, #8
 80047d8:	2203      	movs	r2, #3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f005 f879 	bl	80098d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <USBD_CDC_Init+0x1ec>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	2201      	movs	r2, #1
 80047f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	33b0      	adds	r3, #176	; 0xb0
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004830:	2302      	movs	r3, #2
 8004832:	e018      	b.n	8004866 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7c1b      	ldrb	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800483c:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <USBD_CDC_Init+0x1e8>)
 800483e:	7819      	ldrb	r1, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f005 f930 	bl	8009ab0 <USBD_LL_PrepareReceive>
 8004850:	e008      	b.n	8004864 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <USBD_CDC_Init+0x1e8>)
 8004854:	7819      	ldrb	r1, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800485c:	2340      	movs	r3, #64	; 0x40
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f005 f926 	bl	8009ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000093 	.word	0x20000093
 8004874:	20000094 	.word	0x20000094
 8004878:	20000095 	.word	0x20000095

0800487c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004888:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <USBD_CDC_DeInit+0xf8>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f005 f845 	bl	800991e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004894:	4b37      	ldr	r3, [pc, #220]	; (8004974 <USBD_CDC_DeInit+0xf8>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3324      	adds	r3, #36	; 0x24
 80048aa:	2200      	movs	r2, #0
 80048ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80048ae:	4b32      	ldr	r3, [pc, #200]	; (8004978 <USBD_CDC_DeInit+0xfc>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f005 f832 	bl	800991e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <USBD_CDC_DeInit+0xfc>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80048d2:	2200      	movs	r2, #0
 80048d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80048d6:	4b29      	ldr	r3, [pc, #164]	; (800497c <USBD_CDC_DeInit+0x100>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f005 f81e 	bl	800991e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <USBD_CDC_DeInit+0x100>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f003 020f 	and.w	r2, r3, #15
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	2200      	movs	r2, #0
 80048fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <USBD_CDC_DeInit+0x100>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	3326      	adds	r3, #38	; 0x26
 8004912:	2200      	movs	r2, #0
 8004914:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	32b0      	adds	r2, #176	; 0xb0
 8004920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01f      	beq.n	8004968 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	33b0      	adds	r3, #176	; 0xb0
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	32b0      	adds	r2, #176	; 0xb0
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	4618      	mov	r0, r3
 800494c:	f005 f8f2 	bl	8009b34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	32b0      	adds	r2, #176	; 0xb0
 800495a:	2100      	movs	r1, #0
 800495c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000093 	.word	0x20000093
 8004978:	20000094 	.word	0x20000094
 800497c:	20000095 	.word	0x20000095

08004980 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	32b0      	adds	r2, #176	; 0xb0
 8004994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004998:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e0bf      	b.n	8004b30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d050      	beq.n	8004a5e <USBD_CDC_Setup+0xde>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	f040 80af 	bne.w	8004b20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	88db      	ldrh	r3, [r3, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03a      	beq.n	8004a40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da1b      	bge.n	8004a0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	33b0      	adds	r3, #176	; 0xb0
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80049ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	88d2      	ldrh	r2, [r2, #6]
 80049f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	88db      	ldrh	r3, [r3, #6]
 80049f6:	2b07      	cmp	r3, #7
 80049f8:	bf28      	it	cs
 80049fa:	2307      	movcs	r3, #7
 80049fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	89fa      	ldrh	r2, [r7, #14]
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 fd89 	bl	800651c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004a0a:	e090      	b.n	8004b2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785a      	ldrb	r2, [r3, #1]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	88db      	ldrh	r3, [r3, #6]
 8004a1a:	2b3f      	cmp	r3, #63	; 0x3f
 8004a1c:	d803      	bhi.n	8004a26 <USBD_CDC_Setup+0xa6>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	88db      	ldrh	r3, [r3, #6]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	e000      	b.n	8004a28 <USBD_CDC_Setup+0xa8>
 8004a26:	2240      	movs	r2, #64	; 0x40
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004a2e:	6939      	ldr	r1, [r7, #16]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004a36:	461a      	mov	r2, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f001 fd9b 	bl	8006574 <USBD_CtlPrepareRx>
      break;
 8004a3e:	e076      	b.n	8004b2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	33b0      	adds	r3, #176	; 0xb0
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	7850      	ldrb	r0, [r2, #1]
 8004a56:	2200      	movs	r2, #0
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	4798      	blx	r3
      break;
 8004a5c:	e067      	b.n	8004b2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b0b      	cmp	r3, #11
 8004a64:	d851      	bhi.n	8004b0a <USBD_CDC_Setup+0x18a>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <USBD_CDC_Setup+0xec>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a9d 	.word	0x08004a9d
 8004a70:	08004b19 	.word	0x08004b19
 8004a74:	08004b0b 	.word	0x08004b0b
 8004a78:	08004b0b 	.word	0x08004b0b
 8004a7c:	08004b0b 	.word	0x08004b0b
 8004a80:	08004b0b 	.word	0x08004b0b
 8004a84:	08004b0b 	.word	0x08004b0b
 8004a88:	08004b0b 	.word	0x08004b0b
 8004a8c:	08004b0b 	.word	0x08004b0b
 8004a90:	08004b0b 	.word	0x08004b0b
 8004a94:	08004ac7 	.word	0x08004ac7
 8004a98:	08004af1 	.word	0x08004af1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d107      	bne.n	8004ab8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004aa8:	f107 030a 	add.w	r3, r7, #10
 8004aac:	2202      	movs	r2, #2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f001 fd33 	bl	800651c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ab6:	e032      	b.n	8004b1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f001 fcbd 	bl	800643a <USBD_CtlError>
            ret = USBD_FAIL;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	75fb      	strb	r3, [r7, #23]
          break;
 8004ac4:	e02b      	b.n	8004b1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d107      	bne.n	8004ae2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ad2:	f107 030d 	add.w	r3, r7, #13
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f001 fd1e 	bl	800651c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ae0:	e01d      	b.n	8004b1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f001 fca8 	bl	800643a <USBD_CtlError>
            ret = USBD_FAIL;
 8004aea:	2303      	movs	r3, #3
 8004aec:	75fb      	strb	r3, [r7, #23]
          break;
 8004aee:	e016      	b.n	8004b1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d00f      	beq.n	8004b1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f001 fc9b 	bl	800643a <USBD_CtlError>
            ret = USBD_FAIL;
 8004b04:	2303      	movs	r3, #3
 8004b06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b08:	e008      	b.n	8004b1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004b0a:	6839      	ldr	r1, [r7, #0]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f001 fc94 	bl	800643a <USBD_CtlError>
          ret = USBD_FAIL;
 8004b12:	2303      	movs	r3, #3
 8004b14:	75fb      	strb	r3, [r7, #23]
          break;
 8004b16:	e002      	b.n	8004b1e <USBD_CDC_Setup+0x19e>
          break;
 8004b18:	bf00      	nop
 8004b1a:	e008      	b.n	8004b2e <USBD_CDC_Setup+0x1ae>
          break;
 8004b1c:	bf00      	nop
      }
      break;
 8004b1e:	e006      	b.n	8004b2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f001 fc89 	bl	800643a <USBD_CtlError>
      ret = USBD_FAIL;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004b4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	32b0      	adds	r2, #176	; 0xb0
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e065      	b.n	8004c2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	32b0      	adds	r2, #176	; 0xb0
 8004b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 020f 	and.w	r2, r3, #15
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3318      	adds	r3, #24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02f      	beq.n	8004bec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	f003 010f 	and.w	r1, r3, #15
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	460b      	mov	r3, r1
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4403      	add	r3, r0
 8004bb4:	3348      	adds	r3, #72	; 0x48
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d112      	bne.n	8004bec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 020f 	and.w	r2, r3, #15
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3318      	adds	r3, #24
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004bde:	78f9      	ldrb	r1, [r7, #3]
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f004 ff42 	bl	8009a6e <USBD_LL_Transmit>
 8004bea:	e01f      	b.n	8004c2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	33b0      	adds	r3, #176	; 0xb0
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d010      	beq.n	8004c2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	33b0      	adds	r3, #176	; 0xb0
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	32b0      	adds	r2, #176	; 0xb0
 8004c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	32b0      	adds	r2, #176	; 0xb0
 8004c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e01a      	b.n	8004c9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f004 ff40 	bl	8009af2 <USBD_LL_GetRxDataSize>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	33b0      	adds	r3, #176	; 0xb0
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	32b0      	adds	r2, #176	; 0xb0
 8004cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e025      	b.n	8004d14 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	33b0      	adds	r3, #176	; 0xb0
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <USBD_CDC_EP0_RxReady+0x6c>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ce2:	2bff      	cmp	r3, #255	; 0xff
 8004ce4:	d015      	beq.n	8004d12 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	33b0      	adds	r3, #176	; 0xb0
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004cfe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d06:	b292      	uxth	r2, r2
 8004d08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	22ff      	movs	r2, #255	; 0xff
 8004d0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d24:	2182      	movs	r1, #130	; 0x82
 8004d26:	4818      	ldr	r0, [pc, #96]	; (8004d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d28:	f000 fd4f 	bl	80057ca <USBD_GetEpDesc>
 8004d2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4815      	ldr	r0, [pc, #84]	; (8004d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d32:	f000 fd4a 	bl	80057ca <USBD_GetEpDesc>
 8004d36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d38:	2181      	movs	r1, #129	; 0x81
 8004d3a:	4813      	ldr	r0, [pc, #76]	; (8004d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d3c:	f000 fd45 	bl	80057ca <USBD_GetEpDesc>
 8004d40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5c:	711a      	strb	r2, [r3, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d006      	beq.n	8004d76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d70:	711a      	strb	r2, [r3, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2243      	movs	r2, #67	; 0x43
 8004d7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000050 	.word	0x20000050

08004d8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d94:	2182      	movs	r1, #130	; 0x82
 8004d96:	4818      	ldr	r0, [pc, #96]	; (8004df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004d98:	f000 fd17 	bl	80057ca <USBD_GetEpDesc>
 8004d9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4815      	ldr	r0, [pc, #84]	; (8004df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004da2:	f000 fd12 	bl	80057ca <USBD_GetEpDesc>
 8004da6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004da8:	2181      	movs	r1, #129	; 0x81
 8004daa:	4813      	ldr	r0, [pc, #76]	; (8004df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004dac:	f000 fd0d 	bl	80057ca <USBD_GetEpDesc>
 8004db0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2210      	movs	r2, #16
 8004dbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d006      	beq.n	8004dd2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	711a      	strb	r2, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f042 0202 	orr.w	r2, r2, #2
 8004dd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d006      	beq.n	8004de6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	711a      	strb	r2, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f042 0202 	orr.w	r2, r2, #2
 8004de4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2243      	movs	r2, #67	; 0x43
 8004dea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000050 	.word	0x20000050

08004dfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e04:	2182      	movs	r1, #130	; 0x82
 8004e06:	4818      	ldr	r0, [pc, #96]	; (8004e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e08:	f000 fcdf 	bl	80057ca <USBD_GetEpDesc>
 8004e0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e0e:	2101      	movs	r1, #1
 8004e10:	4815      	ldr	r0, [pc, #84]	; (8004e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e12:	f000 fcda 	bl	80057ca <USBD_GetEpDesc>
 8004e16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e18:	2181      	movs	r1, #129	; 0x81
 8004e1a:	4813      	ldr	r0, [pc, #76]	; (8004e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e1c:	f000 fcd5 	bl	80057ca <USBD_GetEpDesc>
 8004e20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d006      	beq.n	8004e42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3c:	711a      	strb	r2, [r3, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d006      	beq.n	8004e56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e50:	711a      	strb	r2, [r3, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2243      	movs	r2, #67	; 0x43
 8004e5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e5c:	4b02      	ldr	r3, [pc, #8]	; (8004e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000050 	.word	0x20000050

08004e6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	220a      	movs	r2, #10
 8004e78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004e7a:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	2000000c 	.word	0x2000000c

08004e8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e009      	b.n	8004eb4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	33b0      	adds	r3, #176	; 0xb0
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	32b0      	adds	r2, #176	; 0xb0
 8004ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eda:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e008      	b.n	8004ef8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	32b0      	adds	r2, #176	; 0xb0
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e004      	b.n	8004f32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	32b0      	adds	r2, #176	; 0xb0
 8004f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	32b0      	adds	r2, #176	; 0xb0
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e025      	b.n	8004fbe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11f      	bne.n	8004fbc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004f84:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <USBD_CDC_TransmitPacket+0x88>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4403      	add	r3, r0
 8004f9e:	3318      	adds	r3, #24
 8004fa0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <USBD_CDC_TransmitPacket+0x88>)
 8004fa4:	7819      	ldrb	r1, [r3, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f004 fd5b 	bl	8009a6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000093 	.word	0x20000093

08004fcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	32b0      	adds	r2, #176	; 0xb0
 8004fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	32b0      	adds	r2, #176	; 0xb0
 8004fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e018      	b.n	800502c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7c1b      	ldrb	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <USBD_CDC_ReceivePacket+0x68>)
 8005004:	7819      	ldrb	r1, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800500c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f004 fd4d 	bl	8009ab0 <USBD_LL_PrepareReceive>
 8005016:	e008      	b.n	800502a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <USBD_CDC_ReceivePacket+0x68>)
 800501a:	7819      	ldrb	r1, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f004 fd43 	bl	8009ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000094 	.word	0x20000094

08005038 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800504c:	2303      	movs	r3, #3
 800504e:	e01f      	b.n	8005090 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	79fa      	ldrb	r2, [r7, #7]
 8005082:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f004 fbbd 	bl	8009804 <USBD_LL_Init>
 800508a:	4603      	mov	r3, r0
 800508c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800508e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e025      	b.n	80050fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	32ae      	adds	r2, #174	; 0xae
 80050c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00f      	beq.n	80050ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	32ae      	adds	r2, #174	; 0xae
 80050d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	f107 020e 	add.w	r2, r7, #14
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
 80050e4:	4602      	mov	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f004 fbc5 	bl	800989c <USBD_LL_Start>
 8005112:	4603      	mov	r3, r0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005124:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	4611      	mov	r1, r2
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
 800515c:	4603      	mov	r3, r0
 800515e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	4611      	mov	r1, r2
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005190:	2303      	movs	r3, #3
 8005192:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 f908 	bl	80063c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d01a      	beq.n	8005210 <USBD_LL_SetupStage+0x72>
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d822      	bhi.n	8005224 <USBD_LL_SetupStage+0x86>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <USBD_LL_SetupStage+0x4a>
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d00a      	beq.n	80051fc <USBD_LL_SetupStage+0x5e>
 80051e6:	e01d      	b.n	8005224 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fb5f 	bl	80058b4 <USBD_StdDevReq>
 80051f6:	4603      	mov	r3, r0
 80051f8:	73fb      	strb	r3, [r7, #15]
      break;
 80051fa:	e020      	b.n	800523e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fbc7 	bl	8005998 <USBD_StdItfReq>
 800520a:	4603      	mov	r3, r0
 800520c:	73fb      	strb	r3, [r7, #15]
      break;
 800520e:	e016      	b.n	800523e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fc29 	bl	8005a70 <USBD_StdEPReq>
 800521e:	4603      	mov	r3, r0
 8005220:	73fb      	strb	r3, [r7, #15]
      break;
 8005222:	e00c      	b.n	800523e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800522a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800522e:	b2db      	uxtb	r3, r3
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f004 fb92 	bl	800995c <USBD_LL_StallEP>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
      break;
 800523c:	bf00      	nop
  }

  return ret;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	460b      	mov	r3, r1
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800525a:	7afb      	ldrb	r3, [r7, #11]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d16e      	bne.n	800533e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005266:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800526e:	2b03      	cmp	r3, #3
 8005270:	f040 8098 	bne.w	80053a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	429a      	cmp	r2, r3
 800527e:	d913      	bls.n	80052a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	1ad2      	subs	r2, r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	4293      	cmp	r3, r2
 8005298:	bf28      	it	cs
 800529a:	4613      	movcs	r3, r2
 800529c:	461a      	mov	r2, r3
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f001 f984 	bl	80065ae <USBD_CtlContinueRx>
 80052a6:	e07d      	b.n	80053a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d014      	beq.n	80052e0 <USBD_LL_DataOutStage+0x98>
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d81d      	bhi.n	80052f6 <USBD_LL_DataOutStage+0xae>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <USBD_LL_DataOutStage+0x7c>
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d003      	beq.n	80052ca <USBD_LL_DataOutStage+0x82>
 80052c2:	e018      	b.n	80052f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	75bb      	strb	r3, [r7, #22]
            break;
 80052c8:	e018      	b.n	80052fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fa5e 	bl	8005796 <USBD_CoreFindIF>
 80052da:	4603      	mov	r3, r0
 80052dc:	75bb      	strb	r3, [r7, #22]
            break;
 80052de:	e00d      	b.n	80052fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	4619      	mov	r1, r3
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fa60 	bl	80057b0 <USBD_CoreFindEP>
 80052f0:	4603      	mov	r3, r0
 80052f2:	75bb      	strb	r3, [r7, #22]
            break;
 80052f4:	e002      	b.n	80052fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75bb      	strb	r3, [r7, #22]
            break;
 80052fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80052fc:	7dbb      	ldrb	r3, [r7, #22]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d119      	bne.n	8005336 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b03      	cmp	r3, #3
 800530c:	d113      	bne.n	8005336 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800530e:	7dba      	ldrb	r2, [r7, #22]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	32ae      	adds	r2, #174	; 0xae
 8005314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800531e:	7dba      	ldrb	r2, [r7, #22]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005326:	7dba      	ldrb	r2, [r7, #22]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	32ae      	adds	r2, #174	; 0xae
 800532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f001 f94a 	bl	80065d0 <USBD_CtlSendStatus>
 800533c:	e032      	b.n	80053a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005344:	b2db      	uxtb	r3, r3
 8005346:	4619      	mov	r1, r3
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fa31 	bl	80057b0 <USBD_CoreFindEP>
 800534e:	4603      	mov	r3, r0
 8005350:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005352:	7dbb      	ldrb	r3, [r7, #22]
 8005354:	2bff      	cmp	r3, #255	; 0xff
 8005356:	d025      	beq.n	80053a4 <USBD_LL_DataOutStage+0x15c>
 8005358:	7dbb      	ldrb	r3, [r7, #22]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d122      	bne.n	80053a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b03      	cmp	r3, #3
 8005368:	d117      	bne.n	800539a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800536a:	7dba      	ldrb	r2, [r7, #22]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	32ae      	adds	r2, #174	; 0xae
 8005370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00f      	beq.n	800539a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800537a:	7dba      	ldrb	r2, [r7, #22]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005382:	7dba      	ldrb	r2, [r7, #22]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	32ae      	adds	r2, #174	; 0xae
 8005388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	7afa      	ldrb	r2, [r7, #11]
 8005390:	4611      	mov	r1, r2
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	4798      	blx	r3
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	e000      	b.n	80053a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	460b      	mov	r3, r1
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80053bc:	7afb      	ldrb	r3, [r7, #11]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d16f      	bne.n	80054a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3314      	adds	r3, #20
 80053c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d15a      	bne.n	8005488 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d914      	bls.n	8005408 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	1ad2      	subs	r2, r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	461a      	mov	r2, r3
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f001 f8ac 	bl	8006552 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053fa:	2300      	movs	r3, #0
 80053fc:	2200      	movs	r2, #0
 80053fe:	2100      	movs	r1, #0
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f004 fb55 	bl	8009ab0 <USBD_LL_PrepareReceive>
 8005406:	e03f      	b.n	8005488 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d11c      	bne.n	800544e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800541c:	429a      	cmp	r2, r3
 800541e:	d316      	bcc.n	800544e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800542a:	429a      	cmp	r2, r3
 800542c:	d20f      	bcs.n	800544e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f001 f88d 	bl	8006552 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005440:	2300      	movs	r3, #0
 8005442:	2200      	movs	r2, #0
 8005444:	2100      	movs	r1, #0
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f004 fb32 	bl	8009ab0 <USBD_LL_PrepareReceive>
 800544c:	e01c      	b.n	8005488 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b03      	cmp	r3, #3
 8005458:	d10f      	bne.n	800547a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f004 fa6d 	bl	800995c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f001 f8b7 	bl	80065f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d03a      	beq.n	8005508 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff fe42 	bl	800511c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80054a0:	e032      	b.n	8005508 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80054a2:	7afb      	ldrb	r3, [r7, #11]
 80054a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	4619      	mov	r1, r3
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f97f 	bl	80057b0 <USBD_CoreFindEP>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2bff      	cmp	r3, #255	; 0xff
 80054ba:	d025      	beq.n	8005508 <USBD_LL_DataInStage+0x15a>
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d122      	bne.n	8005508 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d11c      	bne.n	8005508 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80054ce:	7dfa      	ldrb	r2, [r7, #23]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	32ae      	adds	r2, #174	; 0xae
 80054d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d014      	beq.n	8005508 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80054de:	7dfa      	ldrb	r2, [r7, #23]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80054e6:	7dfa      	ldrb	r2, [r7, #23]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	32ae      	adds	r2, #174	; 0xae
 80054ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	7afa      	ldrb	r2, [r7, #11]
 80054f4:	4611      	mov	r1, r2
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	4798      	blx	r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80054fe:	7dbb      	ldrb	r3, [r7, #22]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005504:	7dbb      	ldrb	r3, [r7, #22]
 8005506:	e000      	b.n	800550a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d014      	beq.n	8005578 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6852      	ldr	r2, [r2, #4]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	4611      	mov	r1, r2
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005574:	2303      	movs	r3, #3
 8005576:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005578:	2340      	movs	r3, #64	; 0x40
 800557a:	2200      	movs	r2, #0
 800557c:	2100      	movs	r1, #0
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f004 f9a7 	bl	80098d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2240      	movs	r2, #64	; 0x40
 8005590:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	2200      	movs	r2, #0
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f004 f999 	bl	80098d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2240      	movs	r2, #64	; 0x40
 80055aa:	621a      	str	r2, [r3, #32]

  return ret;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2204      	movs	r2, #4
 80055f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b04      	cmp	r3, #4
 8005614:	d106      	bne.n	8005624 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800561c:	b2da      	uxtb	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b03      	cmp	r3, #3
 8005644:	d110      	bne.n	8005668 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	460b      	mov	r3, r1
 800567c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	32ae      	adds	r2, #174	; 0xae
 8005688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005690:	2303      	movs	r3, #3
 8005692:	e01c      	b.n	80056ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b03      	cmp	r3, #3
 800569e:	d115      	bne.n	80056cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	32ae      	adds	r2, #174	; 0xae
 80056aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00b      	beq.n	80056cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	32ae      	adds	r2, #174	; 0xae
 80056be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	4611      	mov	r1, r2
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	32ae      	adds	r2, #174	; 0xae
 80056ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e01c      	b.n	8005732 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b03      	cmp	r3, #3
 8005702:	d115      	bne.n	8005730 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	32ae      	adds	r2, #174	; 0xae
 800570e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	32ae      	adds	r2, #174	; 0xae
 8005722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	4611      	mov	r1, r2
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00e      	beq.n	800578c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6852      	ldr	r2, [r2, #4]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	4611      	mov	r1, r2
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005788:	2303      	movs	r3, #3
 800578a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80057a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80057bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	885b      	ldrh	r3, [r3, #2]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d920      	bls.n	8005834 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80057fa:	e013      	b.n	8005824 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80057fc:	f107 030a 	add.w	r3, r7, #10
 8005800:	4619      	mov	r1, r3
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f000 f81b 	bl	800583e <USBD_GetNextDesc>
 8005808:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b05      	cmp	r3, #5
 8005810:	d108      	bne.n	8005824 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	789b      	ldrb	r3, [r3, #2]
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	429a      	cmp	r2, r3
 800581e:	d008      	beq.n	8005832 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	885b      	ldrh	r3, [r3, #2]
 8005828:	b29a      	uxth	r2, r3
 800582a:	897b      	ldrh	r3, [r7, #10]
 800582c:	429a      	cmp	r2, r3
 800582e:	d8e5      	bhi.n	80057fc <USBD_GetEpDesc+0x32>
 8005830:	e000      	b.n	8005834 <USBD_GetEpDesc+0x6a>
          break;
 8005832:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005834:	693b      	ldr	r3, [r7, #16]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	4413      	add	r3, r2
 8005858:	b29a      	uxth	r2, r3
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	3301      	adds	r3, #1
 800588e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005896:	8a3b      	ldrh	r3, [r7, #16]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	b21a      	sxth	r2, r3
 800589c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	b21b      	sxth	r3, r3
 80058a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80058a6:	89fb      	ldrh	r3, [r7, #14]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d005      	beq.n	80058da <USBD_StdDevReq+0x26>
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d857      	bhi.n	8005982 <USBD_StdDevReq+0xce>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00f      	beq.n	80058f6 <USBD_StdDevReq+0x42>
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d153      	bne.n	8005982 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	32ae      	adds	r2, #174	; 0xae
 80058e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
      break;
 80058f4:	e04a      	b.n	800598c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	2b09      	cmp	r3, #9
 80058fc:	d83b      	bhi.n	8005976 <USBD_StdDevReq+0xc2>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <USBD_StdDevReq+0x50>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005959 	.word	0x08005959
 8005908:	0800596d 	.word	0x0800596d
 800590c:	08005977 	.word	0x08005977
 8005910:	08005963 	.word	0x08005963
 8005914:	08005977 	.word	0x08005977
 8005918:	08005937 	.word	0x08005937
 800591c:	0800592d 	.word	0x0800592d
 8005920:	08005977 	.word	0x08005977
 8005924:	0800594f 	.word	0x0800594f
 8005928:	08005941 	.word	0x08005941
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa3c 	bl	8005dac <USBD_GetDescriptor>
          break;
 8005934:	e024      	b.n	8005980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fba1 	bl	8006080 <USBD_SetAddress>
          break;
 800593e:	e01f      	b.n	8005980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fbe0 	bl	8006108 <USBD_SetConfig>
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]
          break;
 800594c:	e018      	b.n	8005980 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fc83 	bl	800625c <USBD_GetConfig>
          break;
 8005956:	e013      	b.n	8005980 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fcb4 	bl	80062c8 <USBD_GetStatus>
          break;
 8005960:	e00e      	b.n	8005980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fce3 	bl	8006330 <USBD_SetFeature>
          break;
 800596a:	e009      	b.n	8005980 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fd07 	bl	8006382 <USBD_ClrFeature>
          break;
 8005974:	e004      	b.n	8005980 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fd5e 	bl	800643a <USBD_CtlError>
          break;
 800597e:	bf00      	nop
      }
      break;
 8005980:	e004      	b.n	800598c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fd58 	bl	800643a <USBD_CtlError>
      break;
 800598a:	bf00      	nop
  }

  return ret;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop

08005998 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d005      	beq.n	80059be <USBD_StdItfReq+0x26>
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d852      	bhi.n	8005a5c <USBD_StdItfReq+0xc4>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <USBD_StdItfReq+0x26>
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d14e      	bne.n	8005a5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d840      	bhi.n	8005a4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	889b      	ldrh	r3, [r3, #4]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d836      	bhi.n	8005a44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	889b      	ldrh	r3, [r3, #4]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fed9 	bl	8005796 <USBD_CoreFindIF>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2bff      	cmp	r3, #255	; 0xff
 80059ec:	d01d      	beq.n	8005a2a <USBD_StdItfReq+0x92>
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11a      	bne.n	8005a2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80059f4:	7bba      	ldrb	r2, [r7, #14]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	32ae      	adds	r2, #174	; 0xae
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00f      	beq.n	8005a24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005a04:	7bba      	ldrb	r2, [r7, #14]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a0c:	7bba      	ldrb	r2, [r7, #14]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	32ae      	adds	r2, #174	; 0xae
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005a22:	e004      	b.n	8005a2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005a24:	2303      	movs	r3, #3
 8005a26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005a28:	e001      	b.n	8005a2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	88db      	ldrh	r3, [r3, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d110      	bne.n	8005a58 <USBD_StdItfReq+0xc0>
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10d      	bne.n	8005a58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fdc7 	bl	80065d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a42:	e009      	b.n	8005a58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fcf7 	bl	800643a <USBD_CtlError>
          break;
 8005a4c:	e004      	b.n	8005a58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fcf2 	bl	800643a <USBD_CtlError>
          break;
 8005a56:	e000      	b.n	8005a5a <USBD_StdItfReq+0xc2>
          break;
 8005a58:	bf00      	nop
      }
      break;
 8005a5a:	e004      	b.n	8005a66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fceb 	bl	800643a <USBD_CtlError>
      break;
 8005a64:	bf00      	nop
  }

  return ret;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	889b      	ldrh	r3, [r3, #4]
 8005a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d007      	beq.n	8005aa0 <USBD_StdEPReq+0x30>
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	f200 817f 	bhi.w	8005d94 <USBD_StdEPReq+0x324>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02a      	beq.n	8005af0 <USBD_StdEPReq+0x80>
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	f040 817a 	bne.w	8005d94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fe83 	bl	80057b0 <USBD_CoreFindEP>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aae:	7b7b      	ldrb	r3, [r7, #13]
 8005ab0:	2bff      	cmp	r3, #255	; 0xff
 8005ab2:	f000 8174 	beq.w	8005d9e <USBD_StdEPReq+0x32e>
 8005ab6:	7b7b      	ldrb	r3, [r7, #13]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 8170 	bne.w	8005d9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005abe:	7b7a      	ldrb	r2, [r7, #13]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005ac6:	7b7a      	ldrb	r2, [r7, #13]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	32ae      	adds	r2, #174	; 0xae
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8163 	beq.w	8005d9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ad8:	7b7a      	ldrb	r2, [r7, #13]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	32ae      	adds	r2, #174	; 0xae
 8005ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aee:	e156      	b.n	8005d9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d008      	beq.n	8005b0a <USBD_StdEPReq+0x9a>
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	f300 8145 	bgt.w	8005d88 <USBD_StdEPReq+0x318>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 809b 	beq.w	8005c3a <USBD_StdEPReq+0x1ca>
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d03c      	beq.n	8005b82 <USBD_StdEPReq+0x112>
 8005b08:	e13e      	b.n	8005d88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d002      	beq.n	8005b1c <USBD_StdEPReq+0xac>
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d016      	beq.n	8005b48 <USBD_StdEPReq+0xd8>
 8005b1a:	e02c      	b.n	8005b76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <USBD_StdEPReq+0xce>
 8005b22:	7bbb      	ldrb	r3, [r7, #14]
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d00a      	beq.n	8005b3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f003 ff15 	bl	800995c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b32:	2180      	movs	r1, #128	; 0x80
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f003 ff11 	bl	800995c <USBD_LL_StallEP>
 8005b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b3c:	e020      	b.n	8005b80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fc7a 	bl	800643a <USBD_CtlError>
              break;
 8005b46:	e01b      	b.n	8005b80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	885b      	ldrh	r3, [r3, #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10e      	bne.n	8005b6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <USBD_StdEPReq+0xfe>
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d008      	beq.n	8005b6e <USBD_StdEPReq+0xfe>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f003 fef7 	bl	800995c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fd2e 	bl	80065d0 <USBD_CtlSendStatus>

              break;
 8005b74:	e004      	b.n	8005b80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fc5e 	bl	800643a <USBD_CtlError>
              break;
 8005b7e:	bf00      	nop
          }
          break;
 8005b80:	e107      	b.n	8005d92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d002      	beq.n	8005b94 <USBD_StdEPReq+0x124>
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d016      	beq.n	8005bc0 <USBD_StdEPReq+0x150>
 8005b92:	e04b      	b.n	8005c2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <USBD_StdEPReq+0x146>
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d00a      	beq.n	8005bb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f003 fed9 	bl	800995c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f003 fed5 	bl	800995c <USBD_LL_StallEP>
 8005bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bb4:	e040      	b.n	8005c38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fc3e 	bl	800643a <USBD_CtlError>
              break;
 8005bbe:	e03b      	b.n	8005c38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	885b      	ldrh	r3, [r3, #2]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d136      	bne.n	8005c36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005bc8:	7bbb      	ldrb	r3, [r7, #14]
 8005bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f003 fedf 	bl	800999a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fcf7 	bl	80065d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff fde2 	bl	80057b0 <USBD_CoreFindEP>
 8005bec:	4603      	mov	r3, r0
 8005bee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bf0:	7b7b      	ldrb	r3, [r7, #13]
 8005bf2:	2bff      	cmp	r3, #255	; 0xff
 8005bf4:	d01f      	beq.n	8005c36 <USBD_StdEPReq+0x1c6>
 8005bf6:	7b7b      	ldrb	r3, [r7, #13]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d11c      	bne.n	8005c36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005bfc:	7b7a      	ldrb	r2, [r7, #13]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005c04:	7b7a      	ldrb	r2, [r7, #13]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	32ae      	adds	r2, #174	; 0xae
 8005c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c14:	7b7a      	ldrb	r2, [r7, #13]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	32ae      	adds	r2, #174	; 0xae
 8005c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005c2a:	e004      	b.n	8005c36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fc03 	bl	800643a <USBD_CtlError>
              break;
 8005c34:	e000      	b.n	8005c38 <USBD_StdEPReq+0x1c8>
              break;
 8005c36:	bf00      	nop
          }
          break;
 8005c38:	e0ab      	b.n	8005d92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d002      	beq.n	8005c4c <USBD_StdEPReq+0x1dc>
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d032      	beq.n	8005cb0 <USBD_StdEPReq+0x240>
 8005c4a:	e097      	b.n	8005d7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <USBD_StdEPReq+0x1f2>
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d004      	beq.n	8005c62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fbed 	bl	800643a <USBD_CtlError>
                break;
 8005c60:	e091      	b.n	8005d86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da0b      	bge.n	8005c82 <USBD_StdEPReq+0x212>
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	3310      	adds	r3, #16
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3304      	adds	r3, #4
 8005c80:	e00b      	b.n	8005c9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	3304      	adds	r3, #4
 8005c9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fc37 	bl	800651c <USBD_CtlSendData>
              break;
 8005cae:	e06a      	b.n	8005d86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da11      	bge.n	8005cdc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	f003 020f 	and.w	r2, r3, #15
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	3324      	adds	r3, #36	; 0x24
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d117      	bne.n	8005d02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fbb0 	bl	800643a <USBD_CtlError>
                  break;
 8005cda:	e054      	b.n	8005d86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb9d 	bl	800643a <USBD_CtlError>
                  break;
 8005d00:	e041      	b.n	8005d86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da0b      	bge.n	8005d22 <USBD_StdEPReq+0x2b2>
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	3310      	adds	r3, #16
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3304      	adds	r3, #4
 8005d20:	e00b      	b.n	8005d3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	3304      	adds	r3, #4
 8005d3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <USBD_StdEPReq+0x2d8>
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d103      	bne.n	8005d50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e00e      	b.n	8005d6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f003 fe3f 	bl	80099d8 <USBD_LL_IsStallEP>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2202      	movs	r2, #2
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fbd1 	bl	800651c <USBD_CtlSendData>
              break;
 8005d7a:	e004      	b.n	8005d86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fb5b 	bl	800643a <USBD_CtlError>
              break;
 8005d84:	bf00      	nop
          }
          break;
 8005d86:	e004      	b.n	8005d92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fb55 	bl	800643a <USBD_CtlError>
          break;
 8005d90:	bf00      	nop
      }
      break;
 8005d92:	e005      	b.n	8005da0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fb4f 	bl	800643a <USBD_CtlError>
      break;
 8005d9c:	e000      	b.n	8005da0 <USBD_StdEPReq+0x330>
      break;
 8005d9e:	bf00      	nop
  }

  return ret;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	885b      	ldrh	r3, [r3, #2]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	f200 8128 	bhi.w	8006022 <USBD_GetDescriptor+0x276>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <USBD_GetDescriptor+0x2c>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005e4d 	.word	0x08005e4d
 8005de4:	08006023 	.word	0x08006023
 8005de8:	08006023 	.word	0x08006023
 8005dec:	08005fc3 	.word	0x08005fc3
 8005df0:	08005fef 	.word	0x08005fef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	7c12      	ldrb	r2, [r2, #16]
 8005e00:	f107 0108 	add.w	r1, r7, #8
 8005e04:	4610      	mov	r0, r2
 8005e06:	4798      	blx	r3
 8005e08:	60f8      	str	r0, [r7, #12]
      break;
 8005e0a:	e112      	b.n	8006032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7c1b      	ldrb	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f107 0208 	add.w	r2, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e2e:	e100      	b.n	8006032 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f107 0208 	add.w	r2, r7, #8
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
 8005e40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	2202      	movs	r2, #2
 8005e48:	701a      	strb	r2, [r3, #0]
      break;
 8005e4a:	e0f2      	b.n	8006032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	885b      	ldrh	r3, [r3, #2]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b05      	cmp	r3, #5
 8005e54:	f200 80ac 	bhi.w	8005fb0 <USBD_GetDescriptor+0x204>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <USBD_GetDescriptor+0xb4>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e79 	.word	0x08005e79
 8005e64:	08005ead 	.word	0x08005ead
 8005e68:	08005ee1 	.word	0x08005ee1
 8005e6c:	08005f15 	.word	0x08005f15
 8005e70:	08005f49 	.word	0x08005f49
 8005e74:	08005f7d 	.word	0x08005f7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	7c12      	ldrb	r2, [r2, #16]
 8005e90:	f107 0108 	add.w	r1, r7, #8
 8005e94:	4610      	mov	r0, r2
 8005e96:	4798      	blx	r3
 8005e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e9a:	e091      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 facb 	bl	800643a <USBD_CtlError>
            err++;
 8005ea4:	7afb      	ldrb	r3, [r7, #11]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8005eaa:	e089      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7c12      	ldrb	r2, [r2, #16]
 8005ec4:	f107 0108 	add.w	r1, r7, #8
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
 8005ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ece:	e077      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fab1 	bl	800643a <USBD_CtlError>
            err++;
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	3301      	adds	r3, #1
 8005edc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ede:	e06f      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	7c12      	ldrb	r2, [r2, #16]
 8005ef8:	f107 0108 	add.w	r1, r7, #8
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f02:	e05d      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa97 	bl	800643a <USBD_CtlError>
            err++;
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	72fb      	strb	r3, [r7, #11]
          break;
 8005f12:	e055      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	7c12      	ldrb	r2, [r2, #16]
 8005f2c:	f107 0108 	add.w	r1, r7, #8
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
 8005f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f36:	e043      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa7d 	bl	800643a <USBD_CtlError>
            err++;
 8005f40:	7afb      	ldrb	r3, [r7, #11]
 8005f42:	3301      	adds	r3, #1
 8005f44:	72fb      	strb	r3, [r7, #11]
          break;
 8005f46:	e03b      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	7c12      	ldrb	r2, [r2, #16]
 8005f60:	f107 0108 	add.w	r1, r7, #8
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
 8005f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f6a:	e029      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa63 	bl	800643a <USBD_CtlError>
            err++;
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	3301      	adds	r3, #1
 8005f78:	72fb      	strb	r3, [r7, #11]
          break;
 8005f7a:	e021      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	7c12      	ldrb	r2, [r2, #16]
 8005f94:	f107 0108 	add.w	r1, r7, #8
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
 8005f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9e:	e00f      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa49 	bl	800643a <USBD_CtlError>
            err++;
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	3301      	adds	r3, #1
 8005fac:	72fb      	strb	r3, [r7, #11]
          break;
 8005fae:	e007      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa41 	bl	800643a <USBD_CtlError>
          err++;
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005fbe:	bf00      	nop
      }
      break;
 8005fc0:	e037      	b.n	8006032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7c1b      	ldrb	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	f107 0208 	add.w	r2, r7, #8
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4798      	blx	r3
 8005fda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fdc:	e029      	b.n	8006032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fa2a 	bl	800643a <USBD_CtlError>
        err++;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	72fb      	strb	r3, [r7, #11]
      break;
 8005fec:	e021      	b.n	8006032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7c1b      	ldrb	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f107 0208 	add.w	r2, r7, #8
 8006002:	4610      	mov	r0, r2
 8006004:	4798      	blx	r3
 8006006:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	2207      	movs	r2, #7
 800600e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006010:	e00f      	b.n	8006032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa10 	bl	800643a <USBD_CtlError>
        err++;
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	3301      	adds	r3, #1
 800601e:	72fb      	strb	r3, [r7, #11]
      break;
 8006020:	e007      	b.n	8006032 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fa08 	bl	800643a <USBD_CtlError>
      err++;
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	3301      	adds	r3, #1
 800602e:	72fb      	strb	r3, [r7, #11]
      break;
 8006030:	bf00      	nop
  }

  if (err != 0U)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11e      	bne.n	8006076 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	88db      	ldrh	r3, [r3, #6]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d016      	beq.n	800606e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006040:	893b      	ldrh	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88da      	ldrh	r2, [r3, #6]
 800604a:	893b      	ldrh	r3, [r7, #8]
 800604c:	4293      	cmp	r3, r2
 800604e:	bf28      	it	cs
 8006050:	4613      	movcs	r3, r2
 8006052:	b29b      	uxth	r3, r3
 8006054:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006056:	893b      	ldrh	r3, [r7, #8]
 8006058:	461a      	mov	r2, r3
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa5d 	bl	800651c <USBD_CtlSendData>
 8006062:	e009      	b.n	8006078 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f9e7 	bl	800643a <USBD_CtlError>
 800606c:	e004      	b.n	8006078 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 faae 	bl	80065d0 <USBD_CtlSendStatus>
 8006074:	e000      	b.n	8006078 <USBD_GetDescriptor+0x2cc>
    return;
 8006076:	bf00      	nop
  }
}
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	889b      	ldrh	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d131      	bne.n	80060f6 <USBD_SetAddress+0x76>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	88db      	ldrh	r3, [r3, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d12d      	bne.n	80060f6 <USBD_SetAddress+0x76>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d829      	bhi.n	80060f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d104      	bne.n	80060c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9bc 	bl	800643a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	e01d      	b.n	8006100 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f003 fcad 	bl	8009a30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa7a 	bl	80065d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ea:	e009      	b.n	8006100 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f4:	e004      	b.n	8006100 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f99e 	bl	800643a <USBD_CtlError>
  }
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	885b      	ldrh	r3, [r3, #2]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <USBD_SetConfig+0x150>)
 800611e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006120:	4b4d      	ldr	r3, [pc, #308]	; (8006258 <USBD_SetConfig+0x150>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d905      	bls.n	8006134 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f985 	bl	800643a <USBD_CtlError>
    return USBD_FAIL;
 8006130:	2303      	movs	r3, #3
 8006132:	e08c      	b.n	800624e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d002      	beq.n	8006146 <USBD_SetConfig+0x3e>
 8006140:	2b03      	cmp	r3, #3
 8006142:	d029      	beq.n	8006198 <USBD_SetConfig+0x90>
 8006144:	e075      	b.n	8006232 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006146:	4b44      	ldr	r3, [pc, #272]	; (8006258 <USBD_SetConfig+0x150>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800614e:	4b42      	ldr	r3, [pc, #264]	; (8006258 <USBD_SetConfig+0x150>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006158:	4b3f      	ldr	r3, [pc, #252]	; (8006258 <USBD_SetConfig+0x150>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fe ffe7 	bl	8005132 <USBD_SetClassConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f962 	bl	800643a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800617e:	e065      	b.n	800624c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa25 	bl	80065d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2203      	movs	r2, #3
 800618a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800618e:	e05d      	b.n	800624c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fa1d 	bl	80065d0 <USBD_CtlSendStatus>
      break;
 8006196:	e059      	b.n	800624c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006198:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <USBD_SetConfig+0x150>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d112      	bne.n	80061c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80061a8:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <USBD_SetConfig+0x150>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061b2:	4b29      	ldr	r3, [pc, #164]	; (8006258 <USBD_SetConfig+0x150>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7fe ffd6 	bl	800516a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa06 	bl	80065d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061c4:	e042      	b.n	800624c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <USBD_SetConfig+0x150>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d02a      	beq.n	800622a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7fe ffc4 	bl	800516a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80061e2:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <USBD_SetConfig+0x150>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061ec:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <USBD_SetConfig+0x150>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fe ff9d 	bl	8005132 <USBD_SetClassConfig>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00f      	beq.n	8006222 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f918 	bl	800643a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fe ffa9 	bl	800516a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006220:	e014      	b.n	800624c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f9d4 	bl	80065d0 <USBD_CtlSendStatus>
      break;
 8006228:	e010      	b.n	800624c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9d0 	bl	80065d0 <USBD_CtlSendStatus>
      break;
 8006230:	e00c      	b.n	800624c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f900 	bl	800643a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <USBD_SetConfig+0x150>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fe ff92 	bl	800516a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006246:	2303      	movs	r3, #3
 8006248:	73fb      	strb	r3, [r7, #15]
      break;
 800624a:	bf00      	nop
  }

  return ret;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000190 	.word	0x20000190

0800625c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	88db      	ldrh	r3, [r3, #6]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d004      	beq.n	8006278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8e2 	bl	800643a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006276:	e023      	b.n	80062c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	dc02      	bgt.n	800628a <USBD_GetConfig+0x2e>
 8006284:	2b00      	cmp	r3, #0
 8006286:	dc03      	bgt.n	8006290 <USBD_GetConfig+0x34>
 8006288:	e015      	b.n	80062b6 <USBD_GetConfig+0x5a>
 800628a:	2b03      	cmp	r3, #3
 800628c:	d00b      	beq.n	80062a6 <USBD_GetConfig+0x4a>
 800628e:	e012      	b.n	80062b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3308      	adds	r3, #8
 800629a:	2201      	movs	r2, #1
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f93c 	bl	800651c <USBD_CtlSendData>
        break;
 80062a4:	e00c      	b.n	80062c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	2201      	movs	r2, #1
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f934 	bl	800651c <USBD_CtlSendData>
        break;
 80062b4:	e004      	b.n	80062c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8be 	bl	800643a <USBD_CtlError>
        break;
 80062be:	bf00      	nop
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d81e      	bhi.n	800631e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	88db      	ldrh	r3, [r3, #6]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d004      	beq.n	80062f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f8a5 	bl	800643a <USBD_CtlError>
        break;
 80062f0:	e01a      	b.n	8006328 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f043 0202 	orr.w	r2, r3, #2
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	330c      	adds	r3, #12
 8006312:	2202      	movs	r2, #2
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f900 	bl	800651c <USBD_CtlSendData>
      break;
 800631c:	e004      	b.n	8006328 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f88a 	bl	800643a <USBD_CtlError>
      break;
 8006326:	bf00      	nop
  }
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	885b      	ldrh	r3, [r3, #2]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f940 	bl	80065d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006350:	e013      	b.n	800637a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	885b      	ldrh	r3, [r3, #2]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d10b      	bne.n	8006372 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	889b      	ldrh	r3, [r3, #4]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	b29b      	uxth	r3, r3
 8006362:	b2da      	uxtb	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f930 	bl	80065d0 <USBD_CtlSendStatus>
}
 8006370:	e003      	b.n	800637a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f860 	bl	800643a <USBD_CtlError>
}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	2b02      	cmp	r3, #2
 8006398:	d80b      	bhi.n	80063b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	885b      	ldrh	r3, [r3, #2]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10c      	bne.n	80063bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f910 	bl	80065d0 <USBD_CtlSendStatus>
      }
      break;
 80063b0:	e004      	b.n	80063bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f840 	bl	800643a <USBD_CtlError>
      break;
 80063ba:	e000      	b.n	80063be <USBD_ClrFeature+0x3c>
      break;
 80063bc:	bf00      	nop
  }
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	781a      	ldrb	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff fa41 	bl	8005878 <SWAPBYTE>
 80063f6:	4603      	mov	r3, r0
 80063f8:	461a      	mov	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff fa34 	bl	8005878 <SWAPBYTE>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3301      	adds	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7ff fa27 	bl	8005878 <SWAPBYTE>
 800642a:	4603      	mov	r3, r0
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	80da      	strh	r2, [r3, #6]
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f003 fa88 	bl	800995c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800644c:	2100      	movs	r1, #0
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f003 fa84 	bl	800995c <USBD_LL_StallEP>
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d036      	beq.n	80064e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006476:	6938      	ldr	r0, [r7, #16]
 8006478:	f000 f836 	bl	80064e8 <USBD_GetLen>
 800647c:	4603      	mov	r3, r0
 800647e:	3301      	adds	r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	4413      	add	r3, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	7812      	ldrb	r2, [r2, #0]
 8006494:	701a      	strb	r2, [r3, #0]
  idx++;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	3301      	adds	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	2203      	movs	r2, #3
 80064a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	3301      	adds	r3, #1
 80064aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80064ac:	e013      	b.n	80064d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	4413      	add	r3, r2
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	7812      	ldrb	r2, [r2, #0]
 80064b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	3301      	adds	r3, #1
 80064be:	613b      	str	r3, [r7, #16]
    idx++;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	3301      	adds	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	4413      	add	r3, r2
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	3301      	adds	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e7      	bne.n	80064ae <USBD_GetString+0x52>
 80064de:	e000      	b.n	80064e2 <USBD_GetString+0x86>
    return;
 80064e0:	bf00      	nop
  }
}
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80064f8:	e005      	b.n	8006506 <USBD_GetLen+0x1e>
  {
    len++;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	3301      	adds	r3, #1
 80064fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	3301      	adds	r3, #1
 8006504:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f5      	bne.n	80064fa <USBD_GetLen+0x12>
  }

  return len;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2202      	movs	r2, #2
 800652c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	2100      	movs	r1, #0
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f003 fa93 	bl	8009a6e <USBD_LL_Transmit>

  return USBD_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	2100      	movs	r1, #0
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f003 fa82 	bl	8009a6e <USBD_LL_Transmit>

  return USBD_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2203      	movs	r2, #3
 8006584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	2100      	movs	r1, #0
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f003 fa86 	bl	8009ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	2100      	movs	r1, #0
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f003 fa75 	bl	8009ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2204      	movs	r2, #4
 80065dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065e0:	2300      	movs	r3, #0
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f003 fa41 	bl	8009a6e <USBD_LL_Transmit>

  return USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2205      	movs	r2, #5
 8006602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006606:	2300      	movs	r3, #0
 8006608:	2200      	movs	r2, #0
 800660a:	2100      	movs	r1, #0
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f003 fa4f 	bl	8009ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <__NVIC_SetPriority>:
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	6039      	str	r1, [r7, #0]
 8006626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662c:	2b00      	cmp	r3, #0
 800662e:	db0a      	blt.n	8006646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	b2da      	uxtb	r2, r3
 8006634:	490c      	ldr	r1, [pc, #48]	; (8006668 <__NVIC_SetPriority+0x4c>)
 8006636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663a:	0112      	lsls	r2, r2, #4
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	440b      	add	r3, r1
 8006640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006644:	e00a      	b.n	800665c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	4908      	ldr	r1, [pc, #32]	; (800666c <__NVIC_SetPriority+0x50>)
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	3b04      	subs	r3, #4
 8006654:	0112      	lsls	r2, r2, #4
 8006656:	b2d2      	uxtb	r2, r2
 8006658:	440b      	add	r3, r1
 800665a:	761a      	strb	r2, [r3, #24]
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	e000e100 	.word	0xe000e100
 800666c:	e000ed00 	.word	0xe000ed00

08006670 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006674:	2100      	movs	r1, #0
 8006676:	f06f 0004 	mvn.w	r0, #4
 800667a:	f7ff ffcf 	bl	800661c <__NVIC_SetPriority>
#endif
}
 800667e:	bf00      	nop
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800668a:	f3ef 8305 	mrs	r3, IPSR
 800668e:	603b      	str	r3, [r7, #0]
  return(result);
 8006690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006696:	f06f 0305 	mvn.w	r3, #5
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	e00c      	b.n	80066b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <osKernelInitialize+0x44>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066a6:	4b08      	ldr	r3, [pc, #32]	; (80066c8 <osKernelInitialize+0x44>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	e002      	b.n	80066b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066b8:	687b      	ldr	r3, [r7, #4]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000194 	.word	0x20000194

080066cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d2:	f3ef 8305 	mrs	r3, IPSR
 80066d6:	603b      	str	r3, [r7, #0]
  return(result);
 80066d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80066de:	f06f 0305 	mvn.w	r3, #5
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	e010      	b.n	8006708 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <osKernelStart+0x48>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d109      	bne.n	8006702 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066ee:	f7ff ffbf 	bl	8006670 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <osKernelStart+0x48>)
 80066f4:	2202      	movs	r2, #2
 80066f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80066f8:	f001 f866 	bl	80077c8 <vTaskStartScheduler>
      stat = osOK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	e002      	b.n	8006708 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006702:	f04f 33ff 	mov.w	r3, #4294967295
 8006706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006708:	687b      	ldr	r3, [r7, #4]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000194 	.word	0x20000194

08006718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b08e      	sub	sp, #56	; 0x38
 800671c:	af04      	add	r7, sp, #16
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006728:	f3ef 8305 	mrs	r3, IPSR
 800672c:	617b      	str	r3, [r7, #20]
  return(result);
 800672e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006730:	2b00      	cmp	r3, #0
 8006732:	d17e      	bne.n	8006832 <osThreadNew+0x11a>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d07b      	beq.n	8006832 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800673e:	2318      	movs	r3, #24
 8006740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d045      	beq.n	80067de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <osThreadNew+0x48>
        name = attr->name;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <osThreadNew+0x6e>
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b38      	cmp	r3, #56	; 0x38
 8006778:	d805      	bhi.n	8006786 <osThreadNew+0x6e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <osThreadNew+0x72>
        return (NULL);
 8006786:	2300      	movs	r3, #0
 8006788:	e054      	b.n	8006834 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <osThreadNew+0xa8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	2b5b      	cmp	r3, #91	; 0x5b
 80067a8:	d90a      	bls.n	80067c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <osThreadNew+0xa8>
        mem = 1;
 80067ba:	2301      	movs	r3, #1
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	e010      	b.n	80067e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10c      	bne.n	80067e2 <osThreadNew+0xca>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d108      	bne.n	80067e2 <osThreadNew+0xca>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <osThreadNew+0xca>
          mem = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e001      	b.n	80067e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d110      	bne.n	800680a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f0:	9202      	str	r2, [sp, #8]
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6a3a      	ldr	r2, [r7, #32]
 80067fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fe0c 	bl	800741c <xTaskCreateStatic>
 8006804:	4603      	mov	r3, r0
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	e013      	b.n	8006832 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d110      	bne.n	8006832 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	b29a      	uxth	r2, r3
 8006814:	f107 0310 	add.w	r3, r7, #16
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fe57 	bl	80074d6 <xTaskCreate>
 8006828:	4603      	mov	r3, r0
 800682a:	2b01      	cmp	r3, #1
 800682c:	d001      	beq.n	8006832 <osThreadNew+0x11a>
            hTask = NULL;
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006832:	693b      	ldr	r3, [r7, #16]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3728      	adds	r7, #40	; 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006844:	f3ef 8305 	mrs	r3, IPSR
 8006848:	60bb      	str	r3, [r7, #8]
  return(result);
 800684a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <osDelay+0x1c>
    stat = osErrorISR;
 8006850:	f06f 0305 	mvn.w	r3, #5
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e007      	b.n	8006868 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 ff7c 	bl	8007760 <vTaskDelay>
    }
  }

  return (stat);
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a06      	ldr	r2, [pc, #24]	; (80068a4 <vApplicationGetIdleTaskMemory+0x30>)
 800688a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2280      	movs	r2, #128	; 0x80
 8006890:	601a      	str	r2, [r3, #0]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000198 	.word	0x20000198
 80068a4:	200001f4 	.word	0x200001f4

080068a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a07      	ldr	r2, [pc, #28]	; (80068d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80068b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a06      	ldr	r2, [pc, #24]	; (80068d8 <vApplicationGetTimerTaskMemory+0x30>)
 80068be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068c6:	601a      	str	r2, [r3, #0]
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	200003f4 	.word	0x200003f4
 80068d8:	20000450 	.word	0x20000450

080068dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f103 0208 	add.w	r2, r3, #8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295
 80068f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f103 0208 	add.w	r2, r3, #8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f103 0208 	add.w	r2, r3, #8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d103      	bne.n	800699e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e00c      	b.n	80069b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3308      	adds	r3, #8
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e002      	b.n	80069ac <vListInsert+0x2e>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d2f6      	bcs.n	80069a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6892      	ldr	r2, [r2, #8]
 8006a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6852      	ldr	r2, [r2, #4]
 8006a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d103      	bne.n	8006a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	1e5a      	subs	r2, r3, #1
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a6e:	f002 f851 	bl	8008b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a7e:	fb01 f303 	mul.w	r3, r1, r3
 8006a82:	441a      	add	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	441a      	add	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	22ff      	movs	r2, #255	; 0xff
 8006ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d114      	bne.n	8006aee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01a      	beq.n	8006b02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3310      	adds	r3, #16
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f903 	bl	8007cdc <xTaskRemoveFromEventList>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <xQueueGenericReset+0xcc>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e009      	b.n	8006b02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3310      	adds	r3, #16
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fef2 	bl	80068dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff feed 	bl	80068dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b02:	f002 f837 	bl	8008b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b06:	2301      	movs	r3, #1
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08e      	sub	sp, #56	; 0x38
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <xQueueGenericCreateStatic+0x52>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <xQueueGenericCreateStatic+0x56>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <xQueueGenericCreateStatic+0x58>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	623b      	str	r3, [r7, #32]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <xQueueGenericCreateStatic+0x7e>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericCreateStatic+0x82>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericCreateStatic+0x84>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	61fb      	str	r3, [r7, #28]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bb2:	2350      	movs	r3, #80	; 0x50
 8006bb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b50      	cmp	r3, #80	; 0x50
 8006bba:	d00a      	beq.n	8006bd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	61bb      	str	r3, [r7, #24]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f805 	bl	8006c04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3730      	adds	r7, #48	; 0x30
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c32:	2101      	movs	r1, #1
 8006c34:	69b8      	ldr	r0, [r7, #24]
 8006c36:	f7ff ff05 	bl	8006a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericSend+0x32>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <xQueueGenericSend+0x40>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <xQueueGenericSend+0x44>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <xQueueGenericSend+0x46>
 8006c90:	2300      	movs	r3, #0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xQueueGenericSend+0x60>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d103      	bne.n	8006cba <xQueueGenericSend+0x6e>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <xQueueGenericSend+0x72>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <xQueueGenericSend+0x74>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <xQueueGenericSend+0x8e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	623b      	str	r3, [r7, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cda:	f001 f9bd 	bl	8008058 <xTaskGetSchedulerState>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <xQueueGenericSend+0x9e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <xQueueGenericSend+0xa2>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <xQueueGenericSend+0xa4>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xQueueGenericSend+0xbe>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	61fb      	str	r3, [r7, #28]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d0a:	f001 ff03 	bl	8008b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d302      	bcc.n	8006d20 <xQueueGenericSend+0xd4>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d129      	bne.n	8006d74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d26:	f000 fa0b 	bl	8007140 <prvCopyDataToQueue>
 8006d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	3324      	adds	r3, #36	; 0x24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 ffcf 	bl	8007cdc <xTaskRemoveFromEventList>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d013      	beq.n	8006d6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d44:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	e00a      	b.n	8006d6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d5c:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d6c:	f001 ff02 	bl	8008b74 <vPortExitCritical>
				return pdPASS;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e063      	b.n	8006e3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7a:	f001 fefb 	bl	8008b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e05c      	b.n	8006e3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 f809 	bl	8007da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d96:	f001 feed 	bl	8008b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9a:	f000 fd7b 	bl	8007894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d9e:	f001 feb9 	bl	8008b14 <vPortEnterCritical>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d103      	bne.n	8006db8 <xQueueGenericSend+0x16c>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d103      	bne.n	8006dce <xQueueGenericSend+0x182>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dce:	f001 fed1 	bl	8008b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd2:	1d3a      	adds	r2, r7, #4
 8006dd4:	f107 0314 	add.w	r3, r7, #20
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fff8 	bl	8007dd0 <xTaskCheckForTimeOut>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d124      	bne.n	8006e30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de8:	f000 faa2 	bl	8007330 <prvIsQueueFull>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d018      	beq.n	8006e24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	3310      	adds	r3, #16
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 ff1e 	bl	8007c3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e02:	f000 fa2d 	bl	8007260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e06:	f000 fd53 	bl	80078b0 <xTaskResumeAll>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f47f af7c 	bne.w	8006d0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	e772      	b.n	8006d0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e26:	f000 fa1b 	bl	8007260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2a:	f000 fd41 	bl	80078b0 <xTaskResumeAll>
 8006e2e:	e76c      	b.n	8006d0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e32:	f000 fa15 	bl	8007260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e36:	f000 fd3b 	bl	80078b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3738      	adds	r7, #56	; 0x38
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b090      	sub	sp, #64	; 0x40
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <xQueueGenericSendFromISR+0x3c>
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <xQueueGenericSendFromISR+0x40>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <xQueueGenericSendFromISR+0x42>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d103      	bne.n	8006eb2 <xQueueGenericSendFromISR+0x6a>
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <xQueueGenericSendFromISR+0x6e>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <xQueueGenericSendFromISR+0x70>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	623b      	str	r3, [r7, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ed2:	f001 ff01 	bl	8008cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	61fa      	str	r2, [r7, #28]
 8006eec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d302      	bcc.n	8006f04 <xQueueGenericSendFromISR+0xbc>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d12f      	bne.n	8006f64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f1a:	f000 f911 	bl	8007140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d112      	bne.n	8006f4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d016      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fed1 	bl	8007cdc <xTaskRemoveFromEventList>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00e      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e007      	b.n	8006f5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f52:	3301      	adds	r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	b25a      	sxtb	r2, r3
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f62:	e001      	b.n	8006f68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3740      	adds	r7, #64	; 0x40
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <xQueueReceive+0x30>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	623b      	str	r3, [r7, #32]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <xQueueReceive+0x3e>
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueReceive+0x42>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueReceive+0x44>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueReceive+0x5e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	61fb      	str	r3, [r7, #28]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fde:	f001 f83b 	bl	8008058 <xTaskGetSchedulerState>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <xQueueReceive+0x6e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <xQueueReceive+0x72>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <xQueueReceive+0x74>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <xQueueReceive+0x8e>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61bb      	str	r3, [r7, #24]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800700e:	f001 fd81 	bl	8008b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01f      	beq.n	800705e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007022:	f000 f8f7 	bl	8007214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00f      	beq.n	8007056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	3310      	adds	r3, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fe4e 	bl	8007cdc <xTaskRemoveFromEventList>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <xQueueReceive+0x1bc>)
 8007048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007056:	f001 fd8d 	bl	8008b74 <vPortExitCritical>
				return pdPASS;
 800705a:	2301      	movs	r3, #1
 800705c:	e069      	b.n	8007132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007064:	f001 fd86 	bl	8008b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007068:	2300      	movs	r3, #0
 800706a:	e062      	b.n	8007132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007072:	f107 0310 	add.w	r3, r7, #16
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fe94 	bl	8007da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007080:	f001 fd78 	bl	8008b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007084:	f000 fc06 	bl	8007894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007088:	f001 fd44 	bl	8008b14 <vPortEnterCritical>
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007092:	b25b      	sxtb	r3, r3
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d103      	bne.n	80070a2 <xQueueReceive+0x122>
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d103      	bne.n	80070b8 <xQueueReceive+0x138>
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b8:	f001 fd5c 	bl	8008b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070bc:	1d3a      	adds	r2, r7, #4
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fe83 	bl	8007dd0 <xTaskCheckForTimeOut>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d123      	bne.n	8007118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d2:	f000 f917 	bl	8007304 <prvIsQueueEmpty>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d017      	beq.n	800710c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fda9 	bl	8007c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ec:	f000 f8b8 	bl	8007260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070f0:	f000 fbde 	bl	80078b0 <xTaskResumeAll>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d189      	bne.n	800700e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <xQueueReceive+0x1bc>)
 80070fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	e780      	b.n	800700e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f000 f8a7 	bl	8007260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007112:	f000 fbcd 	bl	80078b0 <xTaskResumeAll>
 8007116:	e77a      	b.n	800700e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711a:	f000 f8a1 	bl	8007260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800711e:	f000 fbc7 	bl	80078b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f000 f8ee 	bl	8007304 <prvIsQueueEmpty>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f43f af6f 	beq.w	800700e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3730      	adds	r7, #48	; 0x30
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d14d      	bne.n	8007202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 ff92 	bl	8008094 <xTaskPriorityDisinherit>
 8007170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	e043      	b.n	8007202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d119      	bne.n	80071b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6858      	ldr	r0, [r3, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	461a      	mov	r2, r3
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	f002 fd3a 	bl	8009c04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	441a      	add	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d32b      	bcc.n	8007202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	e026      	b.n	8007202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68d8      	ldr	r0, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	461a      	mov	r2, r3
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	f002 fd20 	bl	8009c04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	425b      	negs	r3, r3
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d207      	bcs.n	80071f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	425b      	negs	r3, r3
 80071ea:	441a      	add	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d105      	bne.n	8007202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	3b01      	subs	r3, #1
 8007200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d018      	beq.n	8007258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	d303      	bcc.n	8007248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68d9      	ldr	r1, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	461a      	mov	r2, r3
 8007252:	6838      	ldr	r0, [r7, #0]
 8007254:	f002 fcd6 	bl	8009c04 <memcpy>
	}
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007268:	f001 fc54 	bl	8008b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007274:	e011      	b.n	800729a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d012      	beq.n	80072a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3324      	adds	r3, #36	; 0x24
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fd2a 	bl	8007cdc <xTaskRemoveFromEventList>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800728e:	f000 fe01 	bl	8007e94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	3b01      	subs	r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dce9      	bgt.n	8007276 <prvUnlockQueue+0x16>
 80072a2:	e000      	b.n	80072a6 <prvUnlockQueue+0x46>
					break;
 80072a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	22ff      	movs	r2, #255	; 0xff
 80072aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072ae:	f001 fc61 	bl	8008b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072b2:	f001 fc2f 	bl	8008b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072be:	e011      	b.n	80072e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3310      	adds	r3, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd05 	bl	8007cdc <xTaskRemoveFromEventList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072d8:	f000 fddc 	bl	8007e94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	3b01      	subs	r3, #1
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dce9      	bgt.n	80072c0 <prvUnlockQueue+0x60>
 80072ec:	e000      	b.n	80072f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	22ff      	movs	r2, #255	; 0xff
 80072f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072f8:	f001 fc3c 	bl	8008b74 <vPortExitCritical>
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800730c:	f001 fc02 	bl	8008b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e001      	b.n	8007322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007322:	f001 fc27 	bl	8008b74 <vPortExitCritical>

	return xReturn;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007338:	f001 fbec 	bl	8008b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	429a      	cmp	r2, r3
 8007346:	d102      	bne.n	800734e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007348:	2301      	movs	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e001      	b.n	8007352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007352:	f001 fc0f 	bl	8008b74 <vPortExitCritical>

	return xReturn;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e014      	b.n	800739a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007370:	4a0f      	ldr	r2, [pc, #60]	; (80073b0 <vQueueAddToRegistry+0x50>)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800737c:	490c      	ldr	r1, [pc, #48]	; (80073b0 <vQueueAddToRegistry+0x50>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007386:	4a0a      	ldr	r2, [pc, #40]	; (80073b0 <vQueueAddToRegistry+0x50>)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4413      	add	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007392:	e006      	b.n	80073a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b07      	cmp	r3, #7
 800739e:	d9e7      	bls.n	8007370 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000850 	.word	0x20000850

080073b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073c4:	f001 fba6 	bl	8008b14 <vPortEnterCritical>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073ce:	b25b      	sxtb	r3, r3
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d103      	bne.n	80073de <vQueueWaitForMessageRestricted+0x2a>
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073e4:	b25b      	sxtb	r3, r3
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d103      	bne.n	80073f4 <vQueueWaitForMessageRestricted+0x40>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073f4:	f001 fbbe 	bl	8008b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	3324      	adds	r3, #36	; 0x24
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fc3b 	bl	8007c84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800740e:	6978      	ldr	r0, [r7, #20]
 8007410:	f7ff ff26 	bl	8007260 <prvUnlockQueue>
	}
 8007414:	bf00      	nop
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	; 0x38
 8007420:	af04      	add	r7, sp, #16
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	623b      	str	r3, [r7, #32]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <xTaskCreateStatic+0x46>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	61fb      	str	r3, [r7, #28]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007462:	235c      	movs	r3, #92	; 0x5c
 8007464:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b5c      	cmp	r3, #92	; 0x5c
 800746a:	d00a      	beq.n	8007482 <xTaskCreateStatic+0x66>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	61bb      	str	r3, [r7, #24]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007482:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01e      	beq.n	80074c8 <xTaskCreateStatic+0xac>
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007498:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	2202      	movs	r2, #2
 800749e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074a2:	2300      	movs	r3, #0
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	9302      	str	r3, [sp, #8]
 80074aa:	f107 0314 	add.w	r3, r7, #20
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f850 	bl	8007560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074c2:	f000 f8dd 	bl	8007680 <prvAddNewTaskToReadyList>
 80074c6:	e001      	b.n	80074cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074cc:	697b      	ldr	r3, [r7, #20]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	; 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b08c      	sub	sp, #48	; 0x30
 80074da:	af04      	add	r7, sp, #16
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	603b      	str	r3, [r7, #0]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fc34 	bl	8008d58 <pvPortMalloc>
 80074f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074f8:	205c      	movs	r0, #92	; 0x5c
 80074fa:	f001 fc2d 	bl	8008d58 <pvPortMalloc>
 80074fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	631a      	str	r2, [r3, #48]	; 0x30
 800750c:	e005      	b.n	800751a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800750e:	6978      	ldr	r0, [r7, #20]
 8007510:	f001 fcee 	bl	8008ef0 <vPortFree>
 8007514:	e001      	b.n	800751a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	2300      	movs	r3, #0
 800752c:	9303      	str	r3, [sp, #12]
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f80e 	bl	8007560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007544:	69f8      	ldr	r0, [r7, #28]
 8007546:	f000 f89b 	bl	8007680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800754a:	2301      	movs	r3, #1
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	e002      	b.n	8007556 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007550:	f04f 33ff 	mov.w	r3, #4294967295
 8007554:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007556:	69bb      	ldr	r3, [r7, #24]
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	461a      	mov	r2, r3
 8007578:	21a5      	movs	r1, #165	; 0xa5
 800757a:	f002 fb6b 	bl	8009c54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007588:	3b01      	subs	r3, #1
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	617b      	str	r3, [r7, #20]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01f      	beq.n	80075fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	e012      	b.n	80075ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	7819      	ldrb	r1, [r3, #0]
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	4413      	add	r3, r2
 80075d2:	3334      	adds	r3, #52	; 0x34
 80075d4:	460a      	mov	r2, r1
 80075d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d006      	beq.n	80075f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	3301      	adds	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b0f      	cmp	r3, #15
 80075ee:	d9e9      	bls.n	80075c4 <prvInitialiseNewTask+0x64>
 80075f0:	e000      	b.n	80075f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80075f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075fc:	e003      	b.n	8007606 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	2b37      	cmp	r3, #55	; 0x37
 800760a:	d901      	bls.n	8007610 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800760c:	2337      	movs	r3, #55	; 0x37
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007614:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800761a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	2200      	movs	r2, #0
 8007620:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	3304      	adds	r3, #4
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff f978 	bl	800691c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	3318      	adds	r3, #24
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff f973 	bl	800691c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800763a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	2200      	movs	r2, #0
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	68f9      	ldr	r1, [r7, #12]
 800765e:	69b8      	ldr	r0, [r7, #24]
 8007660:	f001 f928 	bl	80088b4 <pxPortInitialiseStack>
 8007664:	4602      	mov	r2, r0
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007676:	bf00      	nop
 8007678:	3720      	adds	r7, #32
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007688:	f001 fa44 	bl	8008b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800768c:	4b2d      	ldr	r3, [pc, #180]	; (8007744 <prvAddNewTaskToReadyList+0xc4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <prvAddNewTaskToReadyList+0xc4>)
 8007694:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007696:	4b2c      	ldr	r3, [pc, #176]	; (8007748 <prvAddNewTaskToReadyList+0xc8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800769e:	4a2a      	ldr	r2, [pc, #168]	; (8007748 <prvAddNewTaskToReadyList+0xc8>)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076a4:	4b27      	ldr	r3, [pc, #156]	; (8007744 <prvAddNewTaskToReadyList+0xc4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d110      	bne.n	80076ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076ac:	f000 fc16 	bl	8007edc <prvInitialiseTaskLists>
 80076b0:	e00d      	b.n	80076ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076b2:	4b26      	ldr	r3, [pc, #152]	; (800774c <prvAddNewTaskToReadyList+0xcc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076ba:	4b23      	ldr	r3, [pc, #140]	; (8007748 <prvAddNewTaskToReadyList+0xc8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d802      	bhi.n	80076ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076c8:	4a1f      	ldr	r2, [pc, #124]	; (8007748 <prvAddNewTaskToReadyList+0xc8>)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <prvAddNewTaskToReadyList+0xd0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	4a1e      	ldr	r2, [pc, #120]	; (8007750 <prvAddNewTaskToReadyList+0xd0>)
 80076d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076d8:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <prvAddNewTaskToReadyList+0xd0>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e4:	4b1b      	ldr	r3, [pc, #108]	; (8007754 <prvAddNewTaskToReadyList+0xd4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d903      	bls.n	80076f4 <prvAddNewTaskToReadyList+0x74>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	4a18      	ldr	r2, [pc, #96]	; (8007754 <prvAddNewTaskToReadyList+0xd4>)
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4a15      	ldr	r2, [pc, #84]	; (8007758 <prvAddNewTaskToReadyList+0xd8>)
 8007702:	441a      	add	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7ff f913 	bl	8006936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007710:	f001 fa30 	bl	8008b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <prvAddNewTaskToReadyList+0xcc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00e      	beq.n	800773a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <prvAddNewTaskToReadyList+0xc8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	429a      	cmp	r2, r3
 8007728:	d207      	bcs.n	800773a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800772a:	4b0c      	ldr	r3, [pc, #48]	; (800775c <prvAddNewTaskToReadyList+0xdc>)
 800772c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000d64 	.word	0x20000d64
 8007748:	20000890 	.word	0x20000890
 800774c:	20000d70 	.word	0x20000d70
 8007750:	20000d80 	.word	0x20000d80
 8007754:	20000d6c 	.word	0x20000d6c
 8007758:	20000894 	.word	0x20000894
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d017      	beq.n	80077a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <vTaskDelay+0x60>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <vTaskDelay+0x30>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	60bb      	str	r3, [r7, #8]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007790:	f000 f880 	bl	8007894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fcea 	bl	8008170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800779c:	f000 f888 	bl	80078b0 <xTaskResumeAll>
 80077a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d107      	bne.n	80077b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <vTaskDelay+0x64>)
 80077aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	20000d8c 	.word	0x20000d8c
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077d6:	463a      	mov	r2, r7
 80077d8:	1d39      	adds	r1, r7, #4
 80077da:	f107 0308 	add.w	r3, r7, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff f848 	bl	8006874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	9202      	str	r2, [sp, #8]
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	2300      	movs	r3, #0
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	460a      	mov	r2, r1
 80077f6:	4921      	ldr	r1, [pc, #132]	; (800787c <vTaskStartScheduler+0xb4>)
 80077f8:	4821      	ldr	r0, [pc, #132]	; (8007880 <vTaskStartScheduler+0xb8>)
 80077fa:	f7ff fe0f 	bl	800741c <xTaskCreateStatic>
 80077fe:	4603      	mov	r3, r0
 8007800:	4a20      	ldr	r2, [pc, #128]	; (8007884 <vTaskStartScheduler+0xbc>)
 8007802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007804:	4b1f      	ldr	r3, [pc, #124]	; (8007884 <vTaskStartScheduler+0xbc>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800780c:	2301      	movs	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	e001      	b.n	8007816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d102      	bne.n	8007822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800781c:	f000 fcfc 	bl	8008218 <xTimerCreateTimerTask>
 8007820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d116      	bne.n	8007856 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	613b      	str	r3, [r7, #16]
}
 800783a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800783c:	4b12      	ldr	r3, [pc, #72]	; (8007888 <vTaskStartScheduler+0xc0>)
 800783e:	f04f 32ff 	mov.w	r2, #4294967295
 8007842:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007844:	4b11      	ldr	r3, [pc, #68]	; (800788c <vTaskStartScheduler+0xc4>)
 8007846:	2201      	movs	r2, #1
 8007848:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <vTaskStartScheduler+0xc8>)
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007850:	f001 f8be 	bl	80089d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007854:	e00e      	b.n	8007874 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785c:	d10a      	bne.n	8007874 <vTaskStartScheduler+0xac>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60fb      	str	r3, [r7, #12]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <vTaskStartScheduler+0xaa>
}
 8007874:	bf00      	nop
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08009df8 	.word	0x08009df8
 8007880:	08007ead 	.word	0x08007ead
 8007884:	20000d88 	.word	0x20000d88
 8007888:	20000d84 	.word	0x20000d84
 800788c:	20000d70 	.word	0x20000d70
 8007890:	20000d68 	.word	0x20000d68

08007894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007898:	4b04      	ldr	r3, [pc, #16]	; (80078ac <vTaskSuspendAll+0x18>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3301      	adds	r3, #1
 800789e:	4a03      	ldr	r2, [pc, #12]	; (80078ac <vTaskSuspendAll+0x18>)
 80078a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078a2:	bf00      	nop
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000d8c 	.word	0x20000d8c

080078b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078be:	4b42      	ldr	r3, [pc, #264]	; (80079c8 <xTaskResumeAll+0x118>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <xTaskResumeAll+0x2c>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	603b      	str	r3, [r7, #0]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078dc:	f001 f91a 	bl	8008b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078e0:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <xTaskResumeAll+0x118>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <xTaskResumeAll+0x118>)
 80078e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ea:	4b37      	ldr	r3, [pc, #220]	; (80079c8 <xTaskResumeAll+0x118>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d162      	bne.n	80079b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078f2:	4b36      	ldr	r3, [pc, #216]	; (80079cc <xTaskResumeAll+0x11c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d05e      	beq.n	80079b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078fa:	e02f      	b.n	800795c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fc:	4b34      	ldr	r3, [pc, #208]	; (80079d0 <xTaskResumeAll+0x120>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3318      	adds	r3, #24
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff f871 	bl	80069f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff f86c 	bl	80069f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791c:	4b2d      	ldr	r3, [pc, #180]	; (80079d4 <xTaskResumeAll+0x124>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d903      	bls.n	800792c <xTaskResumeAll+0x7c>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	4a2a      	ldr	r2, [pc, #168]	; (80079d4 <xTaskResumeAll+0x124>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4a27      	ldr	r2, [pc, #156]	; (80079d8 <xTaskResumeAll+0x128>)
 800793a:	441a      	add	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fe fff7 	bl	8006936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	4b23      	ldr	r3, [pc, #140]	; (80079dc <xTaskResumeAll+0x12c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	429a      	cmp	r2, r3
 8007954:	d302      	bcc.n	800795c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007956:	4b22      	ldr	r3, [pc, #136]	; (80079e0 <xTaskResumeAll+0x130>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800795c:	4b1c      	ldr	r3, [pc, #112]	; (80079d0 <xTaskResumeAll+0x120>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1cb      	bne.n	80078fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800796a:	f000 fb55 	bl	8008018 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800796e:	4b1d      	ldr	r3, [pc, #116]	; (80079e4 <xTaskResumeAll+0x134>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d010      	beq.n	800799c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800797a:	f000 f847 	bl	8007a0c <xTaskIncrementTick>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007984:	4b16      	ldr	r3, [pc, #88]	; (80079e0 <xTaskResumeAll+0x130>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3b01      	subs	r3, #1
 800798e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1f1      	bne.n	800797a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <xTaskResumeAll+0x134>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <xTaskResumeAll+0x130>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d009      	beq.n	80079b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079a4:	2301      	movs	r3, #1
 80079a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079a8:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <xTaskResumeAll+0x138>)
 80079aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079b8:	f001 f8dc 	bl	8008b74 <vPortExitCritical>

	return xAlreadyYielded;
 80079bc:	68bb      	ldr	r3, [r7, #8]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000d8c 	.word	0x20000d8c
 80079cc:	20000d64 	.word	0x20000d64
 80079d0:	20000d24 	.word	0x20000d24
 80079d4:	20000d6c 	.word	0x20000d6c
 80079d8:	20000894 	.word	0x20000894
 80079dc:	20000890 	.word	0x20000890
 80079e0:	20000d78 	.word	0x20000d78
 80079e4:	20000d74 	.word	0x20000d74
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <xTaskGetTickCount+0x1c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079f8:	687b      	ldr	r3, [r7, #4]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	20000d68 	.word	0x20000d68

08007a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a16:	4b4f      	ldr	r3, [pc, #316]	; (8007b54 <xTaskIncrementTick+0x148>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f040 808f 	bne.w	8007b3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a20:	4b4d      	ldr	r3, [pc, #308]	; (8007b58 <xTaskIncrementTick+0x14c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3301      	adds	r3, #1
 8007a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a28:	4a4b      	ldr	r2, [pc, #300]	; (8007b58 <xTaskIncrementTick+0x14c>)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d120      	bne.n	8007a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a34:	4b49      	ldr	r3, [pc, #292]	; (8007b5c <xTaskIncrementTick+0x150>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	603b      	str	r3, [r7, #0]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <xTaskIncrementTick+0x46>
 8007a54:	4b41      	ldr	r3, [pc, #260]	; (8007b5c <xTaskIncrementTick+0x150>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	4b41      	ldr	r3, [pc, #260]	; (8007b60 <xTaskIncrementTick+0x154>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a3f      	ldr	r2, [pc, #252]	; (8007b5c <xTaskIncrementTick+0x150>)
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	4a3f      	ldr	r2, [pc, #252]	; (8007b60 <xTaskIncrementTick+0x154>)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4b3e      	ldr	r3, [pc, #248]	; (8007b64 <xTaskIncrementTick+0x158>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	4a3d      	ldr	r2, [pc, #244]	; (8007b64 <xTaskIncrementTick+0x158>)
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	f000 fad1 	bl	8008018 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a76:	4b3c      	ldr	r3, [pc, #240]	; (8007b68 <xTaskIncrementTick+0x15c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d349      	bcc.n	8007b14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a80:	4b36      	ldr	r3, [pc, #216]	; (8007b5c <xTaskIncrementTick+0x150>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d104      	bne.n	8007a94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a8a:	4b37      	ldr	r3, [pc, #220]	; (8007b68 <xTaskIncrementTick+0x15c>)
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a90:	601a      	str	r2, [r3, #0]
					break;
 8007a92:	e03f      	b.n	8007b14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a94:	4b31      	ldr	r3, [pc, #196]	; (8007b5c <xTaskIncrementTick+0x150>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d203      	bcs.n	8007ab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aac:	4a2e      	ldr	r2, [pc, #184]	; (8007b68 <xTaskIncrementTick+0x15c>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ab2:	e02f      	b.n	8007b14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe ff99 	bl	80069f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	3318      	adds	r3, #24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe ff90 	bl	80069f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	4b25      	ldr	r3, [pc, #148]	; (8007b6c <xTaskIncrementTick+0x160>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d903      	bls.n	8007ae4 <xTaskIncrementTick+0xd8>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	4a22      	ldr	r2, [pc, #136]	; (8007b6c <xTaskIncrementTick+0x160>)
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4a1f      	ldr	r2, [pc, #124]	; (8007b70 <xTaskIncrementTick+0x164>)
 8007af2:	441a      	add	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	f7fe ff1b 	bl	8006936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	4b1b      	ldr	r3, [pc, #108]	; (8007b74 <xTaskIncrementTick+0x168>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d3b8      	bcc.n	8007a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b12:	e7b5      	b.n	8007a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b14:	4b17      	ldr	r3, [pc, #92]	; (8007b74 <xTaskIncrementTick+0x168>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1a:	4915      	ldr	r1, [pc, #84]	; (8007b70 <xTaskIncrementTick+0x164>)
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d901      	bls.n	8007b30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b30:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <xTaskIncrementTick+0x16c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e004      	b.n	8007b48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <xTaskIncrementTick+0x170>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	4a0d      	ldr	r2, [pc, #52]	; (8007b7c <xTaskIncrementTick+0x170>)
 8007b46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b48:	697b      	ldr	r3, [r7, #20]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000d8c 	.word	0x20000d8c
 8007b58:	20000d68 	.word	0x20000d68
 8007b5c:	20000d1c 	.word	0x20000d1c
 8007b60:	20000d20 	.word	0x20000d20
 8007b64:	20000d7c 	.word	0x20000d7c
 8007b68:	20000d84 	.word	0x20000d84
 8007b6c:	20000d6c 	.word	0x20000d6c
 8007b70:	20000894 	.word	0x20000894
 8007b74:	20000890 	.word	0x20000890
 8007b78:	20000d78 	.word	0x20000d78
 8007b7c:	20000d74 	.word	0x20000d74

08007b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b86:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <vTaskSwitchContext+0xa8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b8e:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <vTaskSwitchContext+0xac>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b94:	e041      	b.n	8007c1a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b96:	4b25      	ldr	r3, [pc, #148]	; (8007c2c <vTaskSwitchContext+0xac>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9c:	4b24      	ldr	r3, [pc, #144]	; (8007c30 <vTaskSwitchContext+0xb0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	e010      	b.n	8007bc6 <vTaskSwitchContext+0x46>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	607b      	str	r3, [r7, #4]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <vTaskSwitchContext+0x3e>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	491b      	ldr	r1, [pc, #108]	; (8007c34 <vTaskSwitchContext+0xb4>)
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0e4      	beq.n	8007ba4 <vTaskSwitchContext+0x24>
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <vTaskSwitchContext+0xb4>)
 8007be6:	4413      	add	r3, r2
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	605a      	str	r2, [r3, #4]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d104      	bne.n	8007c0a <vTaskSwitchContext+0x8a>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	4a09      	ldr	r2, [pc, #36]	; (8007c38 <vTaskSwitchContext+0xb8>)
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	4a06      	ldr	r2, [pc, #24]	; (8007c30 <vTaskSwitchContext+0xb0>)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6013      	str	r3, [r2, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000d8c 	.word	0x20000d8c
 8007c2c:	20000d78 	.word	0x20000d78
 8007c30:	20000d6c 	.word	0x20000d6c
 8007c34:	20000894 	.word	0x20000894
 8007c38:	20000890 	.word	0x20000890

08007c3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60fb      	str	r3, [r7, #12]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <vTaskPlaceOnEventList+0x44>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3318      	adds	r3, #24
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fe fe87 	bl	800697e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c70:	2101      	movs	r1, #1
 8007c72:	6838      	ldr	r0, [r7, #0]
 8007c74:	f000 fa7c 	bl	8008170 <prvAddCurrentTaskToDelayedList>
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000890 	.word	0x20000890

08007c84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	617b      	str	r3, [r7, #20]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7fe fe3e 	bl	8006936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	f000 fa51 	bl	8008170 <prvAddCurrentTaskToDelayedList>
	}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000890 	.word	0x20000890

08007cdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60fb      	str	r3, [r7, #12]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3318      	adds	r3, #24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fe6f 	bl	80069f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d12:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <xTaskRemoveFromEventList+0xb0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d11d      	bne.n	8007d56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fe66 	bl	80069f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d28:	4b19      	ldr	r3, [pc, #100]	; (8007d90 <xTaskRemoveFromEventList+0xb4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d903      	bls.n	8007d38 <xTaskRemoveFromEventList+0x5c>
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	4a16      	ldr	r2, [pc, #88]	; (8007d90 <xTaskRemoveFromEventList+0xb4>)
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4a13      	ldr	r2, [pc, #76]	; (8007d94 <xTaskRemoveFromEventList+0xb8>)
 8007d46:	441a      	add	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe fdf1 	bl	8006936 <vListInsertEnd>
 8007d54:	e005      	b.n	8007d62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3318      	adds	r3, #24
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	480e      	ldr	r0, [pc, #56]	; (8007d98 <xTaskRemoveFromEventList+0xbc>)
 8007d5e:	f7fe fdea 	bl	8006936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <xTaskRemoveFromEventList+0xc0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d905      	bls.n	8007d7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <xTaskRemoveFromEventList+0xc4>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	e001      	b.n	8007d80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d80:	697b      	ldr	r3, [r7, #20]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000d8c 	.word	0x20000d8c
 8007d90:	20000d6c 	.word	0x20000d6c
 8007d94:	20000894 	.word	0x20000894
 8007d98:	20000d24 	.word	0x20000d24
 8007d9c:	20000890 	.word	0x20000890
 8007da0:	20000d78 	.word	0x20000d78

08007da4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <vTaskInternalSetTimeOutState+0x24>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <vTaskInternalSetTimeOutState+0x28>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	605a      	str	r2, [r3, #4]
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	20000d7c 	.word	0x20000d7c
 8007dcc:	20000d68 	.word	0x20000d68

08007dd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	613b      	str	r3, [r7, #16]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10a      	bne.n	8007e12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	60fb      	str	r3, [r7, #12]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e12:	f000 fe7f 	bl	8008b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e16:	4b1d      	ldr	r3, [pc, #116]	; (8007e8c <xTaskCheckForTimeOut+0xbc>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d102      	bne.n	8007e36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	e023      	b.n	8007e7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <xTaskCheckForTimeOut+0xc0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d007      	beq.n	8007e52 <xTaskCheckForTimeOut+0x82>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d302      	bcc.n	8007e52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	e015      	b.n	8007e7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d20b      	bcs.n	8007e74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	1ad2      	subs	r2, r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff ff9b 	bl	8007da4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	e004      	b.n	8007e7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e7e:	f000 fe79 	bl	8008b74 <vPortExitCritical>

	return xReturn;
 8007e82:	69fb      	ldr	r3, [r7, #28]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3720      	adds	r7, #32
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000d68 	.word	0x20000d68
 8007e90:	20000d7c 	.word	0x20000d7c

08007e94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <vTaskMissedYield+0x14>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
}
 8007e9e:	bf00      	nop
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	20000d78 	.word	0x20000d78

08007eac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007eb4:	f000 f852 	bl	8007f5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007eb8:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <prvIdleTask+0x28>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d9f9      	bls.n	8007eb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <prvIdleTask+0x2c>)
 8007ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ed0:	e7f0      	b.n	8007eb4 <prvIdleTask+0x8>
 8007ed2:	bf00      	nop
 8007ed4:	20000894 	.word	0x20000894
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e00c      	b.n	8007f02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4a12      	ldr	r2, [pc, #72]	; (8007f3c <prvInitialiseTaskLists+0x60>)
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fcf0 	bl	80068dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3301      	adds	r3, #1
 8007f00:	607b      	str	r3, [r7, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b37      	cmp	r3, #55	; 0x37
 8007f06:	d9ef      	bls.n	8007ee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f08:	480d      	ldr	r0, [pc, #52]	; (8007f40 <prvInitialiseTaskLists+0x64>)
 8007f0a:	f7fe fce7 	bl	80068dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f0e:	480d      	ldr	r0, [pc, #52]	; (8007f44 <prvInitialiseTaskLists+0x68>)
 8007f10:	f7fe fce4 	bl	80068dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f14:	480c      	ldr	r0, [pc, #48]	; (8007f48 <prvInitialiseTaskLists+0x6c>)
 8007f16:	f7fe fce1 	bl	80068dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f1a:	480c      	ldr	r0, [pc, #48]	; (8007f4c <prvInitialiseTaskLists+0x70>)
 8007f1c:	f7fe fcde 	bl	80068dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f20:	480b      	ldr	r0, [pc, #44]	; (8007f50 <prvInitialiseTaskLists+0x74>)
 8007f22:	f7fe fcdb 	bl	80068dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <prvInitialiseTaskLists+0x78>)
 8007f28:	4a05      	ldr	r2, [pc, #20]	; (8007f40 <prvInitialiseTaskLists+0x64>)
 8007f2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <prvInitialiseTaskLists+0x7c>)
 8007f2e:	4a05      	ldr	r2, [pc, #20]	; (8007f44 <prvInitialiseTaskLists+0x68>)
 8007f30:	601a      	str	r2, [r3, #0]
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000894 	.word	0x20000894
 8007f40:	20000cf4 	.word	0x20000cf4
 8007f44:	20000d08 	.word	0x20000d08
 8007f48:	20000d24 	.word	0x20000d24
 8007f4c:	20000d38 	.word	0x20000d38
 8007f50:	20000d50 	.word	0x20000d50
 8007f54:	20000d1c 	.word	0x20000d1c
 8007f58:	20000d20 	.word	0x20000d20

08007f5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f62:	e019      	b.n	8007f98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f64:	f000 fdd6 	bl	8008b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f68:	4b10      	ldr	r3, [pc, #64]	; (8007fac <prvCheckTasksWaitingTermination+0x50>)
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fd3b 	bl	80069f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <prvCheckTasksWaitingTermination+0x54>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	4a0b      	ldr	r2, [pc, #44]	; (8007fb0 <prvCheckTasksWaitingTermination+0x54>)
 8007f82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f84:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <prvCheckTasksWaitingTermination+0x58>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	; (8007fb4 <prvCheckTasksWaitingTermination+0x58>)
 8007f8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f8e:	f000 fdf1 	bl	8008b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f810 	bl	8007fb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <prvCheckTasksWaitingTermination+0x58>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e1      	bne.n	8007f64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000d38 	.word	0x20000d38
 8007fb0:	20000d64 	.word	0x20000d64
 8007fb4:	20000d4c 	.word	0x20000d4c

08007fb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d108      	bne.n	8007fdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 ff8e 	bl	8008ef0 <vPortFree>
				vPortFree( pxTCB );
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 ff8b 	bl	8008ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fda:	e018      	b.n	800800e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d103      	bne.n	8007fee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 ff82 	bl	8008ef0 <vPortFree>
	}
 8007fec:	e00f      	b.n	800800e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d00a      	beq.n	800800e <prvDeleteTCB+0x56>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	60fb      	str	r3, [r7, #12]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <prvDeleteTCB+0x54>
	}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800801e:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <prvResetNextTaskUnblockTime+0x38>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <prvResetNextTaskUnblockTime+0x3c>)
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008030:	e008      	b.n	8008044 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008032:	4b07      	ldr	r3, [pc, #28]	; (8008050 <prvResetNextTaskUnblockTime+0x38>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	4a04      	ldr	r2, [pc, #16]	; (8008054 <prvResetNextTaskUnblockTime+0x3c>)
 8008042:	6013      	str	r3, [r2, #0]
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	20000d1c 	.word	0x20000d1c
 8008054:	20000d84 	.word	0x20000d84

08008058 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800805e:	4b0b      	ldr	r3, [pc, #44]	; (800808c <xTaskGetSchedulerState+0x34>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008066:	2301      	movs	r3, #1
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	e008      	b.n	800807e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800806c:	4b08      	ldr	r3, [pc, #32]	; (8008090 <xTaskGetSchedulerState+0x38>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008074:	2302      	movs	r3, #2
 8008076:	607b      	str	r3, [r7, #4]
 8008078:	e001      	b.n	800807e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800807e:	687b      	ldr	r3, [r7, #4]
	}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	20000d70 	.word	0x20000d70
 8008090:	20000d8c 	.word	0x20000d8c

08008094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d056      	beq.n	8008158 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080aa:	4b2e      	ldr	r3, [pc, #184]	; (8008164 <xTaskPriorityDisinherit+0xd0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d00a      	beq.n	80080ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	60fb      	str	r3, [r7, #12]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60bb      	str	r3, [r7, #8]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ec:	1e5a      	subs	r2, r3, #1
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d02c      	beq.n	8008158 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	2b00      	cmp	r3, #0
 8008104:	d128      	bne.n	8008158 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3304      	adds	r3, #4
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fc70 	bl	80069f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <xTaskPriorityDisinherit+0xd4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d903      	bls.n	8008138 <xTaskPriorityDisinherit+0xa4>
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	4a0c      	ldr	r2, [pc, #48]	; (8008168 <xTaskPriorityDisinherit+0xd4>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4a09      	ldr	r2, [pc, #36]	; (800816c <xTaskPriorityDisinherit+0xd8>)
 8008146:	441a      	add	r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3304      	adds	r3, #4
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f7fe fbf1 	bl	8006936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008158:	697b      	ldr	r3, [r7, #20]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000890 	.word	0x20000890
 8008168:	20000d6c 	.word	0x20000d6c
 800816c:	20000894 	.word	0x20000894

08008170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800817a:	4b21      	ldr	r3, [pc, #132]	; (8008200 <prvAddCurrentTaskToDelayedList+0x90>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008180:	4b20      	ldr	r3, [pc, #128]	; (8008204 <prvAddCurrentTaskToDelayedList+0x94>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3304      	adds	r3, #4
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fc32 	bl	80069f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d10a      	bne.n	80081aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800819a:	4b1a      	ldr	r3, [pc, #104]	; (8008204 <prvAddCurrentTaskToDelayedList+0x94>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4819      	ldr	r0, [pc, #100]	; (8008208 <prvAddCurrentTaskToDelayedList+0x98>)
 80081a4:	f7fe fbc7 	bl	8006936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081a8:	e026      	b.n	80081f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4413      	add	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081b2:	4b14      	ldr	r3, [pc, #80]	; (8008204 <prvAddCurrentTaskToDelayedList+0x94>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d209      	bcs.n	80081d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081c2:	4b12      	ldr	r3, [pc, #72]	; (800820c <prvAddCurrentTaskToDelayedList+0x9c>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <prvAddCurrentTaskToDelayedList+0x94>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f7fe fbd5 	bl	800697e <vListInsert>
}
 80081d4:	e010      	b.n	80081f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081d6:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <prvAddCurrentTaskToDelayedList+0x94>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe fbcb 	bl	800697e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081e8:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d202      	bcs.n	80081f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081f2:	4a08      	ldr	r2, [pc, #32]	; (8008214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	6013      	str	r3, [r2, #0]
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000d68 	.word	0x20000d68
 8008204:	20000890 	.word	0x20000890
 8008208:	20000d50 	.word	0x20000d50
 800820c:	20000d20 	.word	0x20000d20
 8008210:	20000d1c 	.word	0x20000d1c
 8008214:	20000d84 	.word	0x20000d84

08008218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08a      	sub	sp, #40	; 0x28
 800821c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008222:	f000 fb07 	bl	8008834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008226:	4b1c      	ldr	r3, [pc, #112]	; (8008298 <xTimerCreateTimerTask+0x80>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d021      	beq.n	8008272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008236:	1d3a      	adds	r2, r7, #4
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	f107 030c 	add.w	r3, r7, #12
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fb31 	bl	80068a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	9202      	str	r2, [sp, #8]
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	2302      	movs	r3, #2
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	460a      	mov	r2, r1
 8008258:	4910      	ldr	r1, [pc, #64]	; (800829c <xTimerCreateTimerTask+0x84>)
 800825a:	4811      	ldr	r0, [pc, #68]	; (80082a0 <xTimerCreateTimerTask+0x88>)
 800825c:	f7ff f8de 	bl	800741c <xTaskCreateStatic>
 8008260:	4603      	mov	r3, r0
 8008262:	4a10      	ldr	r2, [pc, #64]	; (80082a4 <xTimerCreateTimerTask+0x8c>)
 8008264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <xTimerCreateTimerTask+0x8c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800826e:	2301      	movs	r3, #1
 8008270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	613b      	str	r3, [r7, #16]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800828e:	697b      	ldr	r3, [r7, #20]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20000dc0 	.word	0x20000dc0
 800829c:	08009e00 	.word	0x08009e00
 80082a0:	080083dd 	.word	0x080083dd
 80082a4:	20000dc4 	.word	0x20000dc4

080082a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	623b      	str	r3, [r7, #32]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082d6:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <xTimerGenericCommand+0x98>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d02a      	beq.n	8008334 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b05      	cmp	r3, #5
 80082ee:	dc18      	bgt.n	8008322 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082f0:	f7ff feb2 	bl	8008058 <xTaskGetSchedulerState>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d109      	bne.n	800830e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082fa:	4b11      	ldr	r3, [pc, #68]	; (8008340 <xTimerGenericCommand+0x98>)
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f107 0110 	add.w	r1, r7, #16
 8008302:	2300      	movs	r3, #0
 8008304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008306:	f7fe fca1 	bl	8006c4c <xQueueGenericSend>
 800830a:	6278      	str	r0, [r7, #36]	; 0x24
 800830c:	e012      	b.n	8008334 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800830e:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <xTimerGenericCommand+0x98>)
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	f107 0110 	add.w	r1, r7, #16
 8008316:	2300      	movs	r3, #0
 8008318:	2200      	movs	r2, #0
 800831a:	f7fe fc97 	bl	8006c4c <xQueueGenericSend>
 800831e:	6278      	str	r0, [r7, #36]	; 0x24
 8008320:	e008      	b.n	8008334 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <xTimerGenericCommand+0x98>)
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f107 0110 	add.w	r1, r7, #16
 800832a:	2300      	movs	r3, #0
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	f7fe fd8b 	bl	8006e48 <xQueueGenericSendFromISR>
 8008332:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008336:	4618      	mov	r0, r3
 8008338:	3728      	adds	r7, #40	; 0x28
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000dc0 	.word	0x20000dc0

08008344 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af02      	add	r7, sp, #8
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834e:	4b22      	ldr	r3, [pc, #136]	; (80083d8 <prvProcessExpiredTimer+0x94>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	3304      	adds	r3, #4
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe fb47 	bl	80069f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d022      	beq.n	80083b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	699a      	ldr	r2, [r3, #24]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	18d1      	adds	r1, r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	6978      	ldr	r0, [r7, #20]
 800837e:	f000 f8d1 	bl	8008524 <prvInsertTimerInActiveList>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01f      	beq.n	80083c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008388:	2300      	movs	r3, #0
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	2300      	movs	r3, #0
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	2100      	movs	r1, #0
 8008392:	6978      	ldr	r0, [r7, #20]
 8008394:	f7ff ff88 	bl	80082a8 <xTimerGenericCommand>
 8008398:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d113      	bne.n	80083c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	60fb      	str	r3, [r7, #12]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083bc:	f023 0301 	bic.w	r3, r3, #1
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	6978      	ldr	r0, [r7, #20]
 80083ce:	4798      	blx	r3
}
 80083d0:	bf00      	nop
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20000db8 	.word	0x20000db8

080083dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f857 	bl	800849c <prvGetNextExpireTime>
 80083ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f803 	bl	8008400 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083fa:	f000 f8d5 	bl	80085a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083fe:	e7f1      	b.n	80083e4 <prvTimerTask+0x8>

08008400 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800840a:	f7ff fa43 	bl	8007894 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800840e:	f107 0308 	add.w	r3, r7, #8
 8008412:	4618      	mov	r0, r3
 8008414:	f000 f866 	bl	80084e4 <prvSampleTimeNow>
 8008418:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d130      	bne.n	8008482 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <prvProcessTimerOrBlockTask+0x3c>
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	429a      	cmp	r2, r3
 800842c:	d806      	bhi.n	800843c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800842e:	f7ff fa3f 	bl	80078b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008432:	68f9      	ldr	r1, [r7, #12]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff ff85 	bl	8008344 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800843a:	e024      	b.n	8008486 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d008      	beq.n	8008454 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008442:	4b13      	ldr	r3, [pc, #76]	; (8008490 <prvProcessTimerOrBlockTask+0x90>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <prvProcessTimerOrBlockTask+0x50>
 800844c:	2301      	movs	r3, #1
 800844e:	e000      	b.n	8008452 <prvProcessTimerOrBlockTask+0x52>
 8008450:	2300      	movs	r3, #0
 8008452:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <prvProcessTimerOrBlockTask+0x94>)
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4619      	mov	r1, r3
 8008462:	f7fe ffa7 	bl	80073b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008466:	f7ff fa23 	bl	80078b0 <xTaskResumeAll>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <prvProcessTimerOrBlockTask+0x98>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
}
 8008480:	e001      	b.n	8008486 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008482:	f7ff fa15 	bl	80078b0 <xTaskResumeAll>
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000dbc 	.word	0x20000dbc
 8008494:	20000dc0 	.word	0x20000dc0
 8008498:	e000ed04 	.word	0xe000ed04

0800849c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084a4:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <prvGetNextExpireTime+0x44>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <prvGetNextExpireTime+0x16>
 80084ae:	2201      	movs	r2, #1
 80084b0:	e000      	b.n	80084b4 <prvGetNextExpireTime+0x18>
 80084b2:	2200      	movs	r2, #0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d105      	bne.n	80084cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <prvGetNextExpireTime+0x44>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	e001      	b.n	80084d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084d0:	68fb      	ldr	r3, [r7, #12]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20000db8 	.word	0x20000db8

080084e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084ec:	f7ff fa7e 	bl	80079ec <xTaskGetTickCount>
 80084f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084f2:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <prvSampleTimeNow+0x3c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d205      	bcs.n	8008508 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084fc:	f000 f936 	bl	800876c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	e002      	b.n	800850e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800850e:	4a04      	ldr	r2, [pc, #16]	; (8008520 <prvSampleTimeNow+0x3c>)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008514:	68fb      	ldr	r3, [r7, #12]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000dc8 	.word	0x20000dc8

08008524 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d812      	bhi.n	8008570 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	1ad2      	subs	r2, r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	429a      	cmp	r2, r3
 8008556:	d302      	bcc.n	800855e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008558:	2301      	movs	r3, #1
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	e01b      	b.n	8008596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800855e:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <prvInsertTimerInActiveList+0x7c>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3304      	adds	r3, #4
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f7fe fa08 	bl	800697e <vListInsert>
 800856e:	e012      	b.n	8008596 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d206      	bcs.n	8008586 <prvInsertTimerInActiveList+0x62>
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d302      	bcc.n	8008586 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e007      	b.n	8008596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008586:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <prvInsertTimerInActiveList+0x80>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3304      	adds	r3, #4
 800858e:	4619      	mov	r1, r3
 8008590:	4610      	mov	r0, r2
 8008592:	f7fe f9f4 	bl	800697e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008596:	697b      	ldr	r3, [r7, #20]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000dbc 	.word	0x20000dbc
 80085a4:	20000db8 	.word	0x20000db8

080085a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08e      	sub	sp, #56	; 0x38
 80085ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085ae:	e0ca      	b.n	8008746 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da18      	bge.n	80085e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085b6:	1d3b      	adds	r3, r7, #4
 80085b8:	3304      	adds	r3, #4
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	61fb      	str	r3, [r7, #28]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085de:	6850      	ldr	r0, [r2, #4]
 80085e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e2:	6892      	ldr	r2, [r2, #8]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f2c0 80aa 	blt.w	8008744 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe f9f5 	bl	80069f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008606:	463b      	mov	r3, r7
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff ff6b 	bl	80084e4 <prvSampleTimeNow>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b09      	cmp	r3, #9
 8008614:	f200 8097 	bhi.w	8008746 <prvProcessReceivedCommands+0x19e>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <prvProcessReceivedCommands+0x78>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008649 	.word	0x08008649
 8008624:	08008649 	.word	0x08008649
 8008628:	08008649 	.word	0x08008649
 800862c:	080086bd 	.word	0x080086bd
 8008630:	080086d1 	.word	0x080086d1
 8008634:	0800871b 	.word	0x0800871b
 8008638:	08008649 	.word	0x08008649
 800863c:	08008649 	.word	0x08008649
 8008640:	080086bd 	.word	0x080086bd
 8008644:	080086d1 	.word	0x080086d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800864e:	f043 0301 	orr.w	r3, r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	18d1      	adds	r1, r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008668:	f7ff ff5c 	bl	8008524 <prvInsertTimerInActiveList>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d069      	beq.n	8008746 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008678:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d05e      	beq.n	8008746 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	441a      	add	r2, r3
 8008690:	2300      	movs	r3, #0
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	2300      	movs	r3, #0
 8008696:	2100      	movs	r1, #0
 8008698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800869a:	f7ff fe05 	bl	80082a8 <xTimerGenericCommand>
 800869e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d14f      	bne.n	8008746 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	61bb      	str	r3, [r7, #24]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086c2:	f023 0301 	bic.w	r3, r3, #1
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086ce:	e03a      	b.n	8008746 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	617b      	str	r3, [r7, #20]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	18d1      	adds	r1, r2, r3
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008714:	f7ff ff06 	bl	8008524 <prvInsertTimerInActiveList>
					break;
 8008718:	e015      	b.n	8008746 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d103      	bne.n	8008730 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800872a:	f000 fbe1 	bl	8008ef0 <vPortFree>
 800872e:	e00a      	b.n	8008746 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008736:	f023 0301 	bic.w	r3, r3, #1
 800873a:	b2da      	uxtb	r2, r3
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008742:	e000      	b.n	8008746 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008744:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <prvProcessReceivedCommands+0x1c0>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	1d39      	adds	r1, r7, #4
 800874c:	2200      	movs	r2, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fc16 	bl	8006f80 <xQueueReceive>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	f47f af2a 	bne.w	80085b0 <prvProcessReceivedCommands+0x8>
	}
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	3730      	adds	r7, #48	; 0x30
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000dc0 	.word	0x20000dc0

0800876c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008772:	e048      	b.n	8008806 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008774:	4b2d      	ldr	r3, [pc, #180]	; (800882c <prvSwitchTimerLists+0xc0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877e:	4b2b      	ldr	r3, [pc, #172]	; (800882c <prvSwitchTimerLists+0xc0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3304      	adds	r3, #4
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe f92f 	bl	80069f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d02e      	beq.n	8008806 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4413      	add	r3, r2
 80087b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d90e      	bls.n	80087d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087c6:	4b19      	ldr	r3, [pc, #100]	; (800882c <prvSwitchTimerLists+0xc0>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4619      	mov	r1, r3
 80087d0:	4610      	mov	r0, r2
 80087d2:	f7fe f8d4 	bl	800697e <vListInsert>
 80087d6:	e016      	b.n	8008806 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087d8:	2300      	movs	r3, #0
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	2100      	movs	r1, #0
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff fd60 	bl	80082a8 <xTimerGenericCommand>
 80087e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	603b      	str	r3, [r7, #0]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <prvSwitchTimerLists+0xc0>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1b1      	bne.n	8008774 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <prvSwitchTimerLists+0xc0>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008816:	4b06      	ldr	r3, [pc, #24]	; (8008830 <prvSwitchTimerLists+0xc4>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a04      	ldr	r2, [pc, #16]	; (800882c <prvSwitchTimerLists+0xc0>)
 800881c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800881e:	4a04      	ldr	r2, [pc, #16]	; (8008830 <prvSwitchTimerLists+0xc4>)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	6013      	str	r3, [r2, #0]
}
 8008824:	bf00      	nop
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20000db8 	.word	0x20000db8
 8008830:	20000dbc 	.word	0x20000dbc

08008834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800883a:	f000 f96b 	bl	8008b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800883e:	4b15      	ldr	r3, [pc, #84]	; (8008894 <prvCheckForValidListAndQueue+0x60>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d120      	bne.n	8008888 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008846:	4814      	ldr	r0, [pc, #80]	; (8008898 <prvCheckForValidListAndQueue+0x64>)
 8008848:	f7fe f848 	bl	80068dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800884c:	4813      	ldr	r0, [pc, #76]	; (800889c <prvCheckForValidListAndQueue+0x68>)
 800884e:	f7fe f845 	bl	80068dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <prvCheckForValidListAndQueue+0x6c>)
 8008854:	4a10      	ldr	r2, [pc, #64]	; (8008898 <prvCheckForValidListAndQueue+0x64>)
 8008856:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008858:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <prvCheckForValidListAndQueue+0x70>)
 800885a:	4a10      	ldr	r2, [pc, #64]	; (800889c <prvCheckForValidListAndQueue+0x68>)
 800885c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800885e:	2300      	movs	r3, #0
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <prvCheckForValidListAndQueue+0x74>)
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <prvCheckForValidListAndQueue+0x78>)
 8008866:	2110      	movs	r1, #16
 8008868:	200a      	movs	r0, #10
 800886a:	f7fe f953 	bl	8006b14 <xQueueGenericCreateStatic>
 800886e:	4603      	mov	r3, r0
 8008870:	4a08      	ldr	r2, [pc, #32]	; (8008894 <prvCheckForValidListAndQueue+0x60>)
 8008872:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008874:	4b07      	ldr	r3, [pc, #28]	; (8008894 <prvCheckForValidListAndQueue+0x60>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <prvCheckForValidListAndQueue+0x60>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	490b      	ldr	r1, [pc, #44]	; (80088b0 <prvCheckForValidListAndQueue+0x7c>)
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fd6c 	bl	8007360 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008888:	f000 f974 	bl	8008b74 <vPortExitCritical>
}
 800888c:	bf00      	nop
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000dc0 	.word	0x20000dc0
 8008898:	20000d90 	.word	0x20000d90
 800889c:	20000da4 	.word	0x20000da4
 80088a0:	20000db8 	.word	0x20000db8
 80088a4:	20000dbc 	.word	0x20000dbc
 80088a8:	20000e6c 	.word	0x20000e6c
 80088ac:	20000dcc 	.word	0x20000dcc
 80088b0:	08009e08 	.word	0x08009e08

080088b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3b04      	subs	r3, #4
 80088c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3b04      	subs	r3, #4
 80088d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f023 0201 	bic.w	r2, r3, #1
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3b04      	subs	r3, #4
 80088e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088e4:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <pxPortInitialiseStack+0x64>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3b14      	subs	r3, #20
 80088ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3b04      	subs	r3, #4
 80088fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f06f 0202 	mvn.w	r2, #2
 8008902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3b20      	subs	r3, #32
 8008908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800890a:	68fb      	ldr	r3, [r7, #12]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	0800891d 	.word	0x0800891d

0800891c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008926:	4b12      	ldr	r3, [pc, #72]	; (8008970 <prvTaskExitError+0x54>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d00a      	beq.n	8008946 <prvTaskExitError+0x2a>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	60fb      	str	r3, [r7, #12]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <prvTaskExitError+0x28>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60bb      	str	r3, [r7, #8]
}
 8008958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800895a:	bf00      	nop
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0fc      	beq.n	800895c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008962:	bf00      	nop
 8008964:	bf00      	nop
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	20000098 	.word	0x20000098
	...

08008980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <pxCurrentTCBConst2>)
 8008982:	6819      	ldr	r1, [r3, #0]
 8008984:	6808      	ldr	r0, [r1, #0]
 8008986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898a:	f380 8809 	msr	PSP, r0
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f04f 0000 	mov.w	r0, #0
 8008996:	f380 8811 	msr	BASEPRI, r0
 800899a:	4770      	bx	lr
 800899c:	f3af 8000 	nop.w

080089a0 <pxCurrentTCBConst2>:
 80089a0:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop

080089a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089a8:	4808      	ldr	r0, [pc, #32]	; (80089cc <prvPortStartFirstTask+0x24>)
 80089aa:	6800      	ldr	r0, [r0, #0]
 80089ac:	6800      	ldr	r0, [r0, #0]
 80089ae:	f380 8808 	msr	MSP, r0
 80089b2:	f04f 0000 	mov.w	r0, #0
 80089b6:	f380 8814 	msr	CONTROL, r0
 80089ba:	b662      	cpsie	i
 80089bc:	b661      	cpsie	f
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	df00      	svc	0
 80089c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089ca:	bf00      	nop
 80089cc:	e000ed08 	.word	0xe000ed08

080089d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089d6:	4b46      	ldr	r3, [pc, #280]	; (8008af0 <xPortStartScheduler+0x120>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a46      	ldr	r2, [pc, #280]	; (8008af4 <xPortStartScheduler+0x124>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d10a      	bne.n	80089f6 <xPortStartScheduler+0x26>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	613b      	str	r3, [r7, #16]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089f6:	4b3e      	ldr	r3, [pc, #248]	; (8008af0 <xPortStartScheduler+0x120>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a3f      	ldr	r2, [pc, #252]	; (8008af8 <xPortStartScheduler+0x128>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d10a      	bne.n	8008a16 <xPortStartScheduler+0x46>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	60fb      	str	r3, [r7, #12]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a16:	4b39      	ldr	r3, [pc, #228]	; (8008afc <xPortStartScheduler+0x12c>)
 8008a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	22ff      	movs	r2, #255	; 0xff
 8008a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <xPortStartScheduler+0x130>)
 8008a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a3e:	4b31      	ldr	r3, [pc, #196]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a40:	2207      	movs	r2, #7
 8008a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a44:	e009      	b.n	8008a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a46:	4b2f      	ldr	r3, [pc, #188]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	4a2d      	ldr	r2, [pc, #180]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a62:	2b80      	cmp	r3, #128	; 0x80
 8008a64:	d0ef      	beq.n	8008a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a66:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f1c3 0307 	rsb	r3, r3, #7
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d00a      	beq.n	8008a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	60bb      	str	r3, [r7, #8]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a88:	4b1e      	ldr	r3, [pc, #120]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a92:	4b1c      	ldr	r3, [pc, #112]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a9a:	4a1a      	ldr	r2, [pc, #104]	; (8008b04 <xPortStartScheduler+0x134>)
 8008a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008aa6:	4b18      	ldr	r3, [pc, #96]	; (8008b08 <xPortStartScheduler+0x138>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a17      	ldr	r2, [pc, #92]	; (8008b08 <xPortStartScheduler+0x138>)
 8008aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ab2:	4b15      	ldr	r3, [pc, #84]	; (8008b08 <xPortStartScheduler+0x138>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <xPortStartScheduler+0x138>)
 8008ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008abe:	f000 f8dd 	bl	8008c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ac2:	4b12      	ldr	r3, [pc, #72]	; (8008b0c <xPortStartScheduler+0x13c>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ac8:	f000 f8fc 	bl	8008cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008acc:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <xPortStartScheduler+0x140>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a0f      	ldr	r2, [pc, #60]	; (8008b10 <xPortStartScheduler+0x140>)
 8008ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ad8:	f7ff ff66 	bl	80089a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008adc:	f7ff f850 	bl	8007b80 <vTaskSwitchContext>
	prvTaskExitError();
 8008ae0:	f7ff ff1c 	bl	800891c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	e000ed00 	.word	0xe000ed00
 8008af4:	410fc271 	.word	0x410fc271
 8008af8:	410fc270 	.word	0x410fc270
 8008afc:	e000e400 	.word	0xe000e400
 8008b00:	20000ebc 	.word	0x20000ebc
 8008b04:	20000ec0 	.word	0x20000ec0
 8008b08:	e000ed20 	.word	0xe000ed20
 8008b0c:	20000098 	.word	0x20000098
 8008b10:	e000ef34 	.word	0xe000ef34

08008b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	607b      	str	r3, [r7, #4]
}
 8008b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <vPortEnterCritical+0x58>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	4a0d      	ldr	r2, [pc, #52]	; (8008b6c <vPortEnterCritical+0x58>)
 8008b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <vPortEnterCritical+0x58>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d10f      	bne.n	8008b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <vPortEnterCritical+0x5c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	603b      	str	r3, [r7, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <vPortEnterCritical+0x4a>
	}
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000098 	.word	0x20000098
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <vPortExitCritical+0x50>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <vPortExitCritical+0x24>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	607b      	str	r3, [r7, #4]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b98:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <vPortExitCritical+0x50>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	4a09      	ldr	r2, [pc, #36]	; (8008bc4 <vPortExitCritical+0x50>)
 8008ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ba2:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <vPortExitCritical+0x50>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d105      	bne.n	8008bb6 <vPortExitCritical+0x42>
 8008baa:	2300      	movs	r3, #0
 8008bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	f383 8811 	msr	BASEPRI, r3
}
 8008bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20000098 	.word	0x20000098
	...

08008bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bd0:	f3ef 8009 	mrs	r0, PSP
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <pxCurrentTCBConst>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	f01e 0f10 	tst.w	lr, #16
 8008be0:	bf08      	it	eq
 8008be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	6010      	str	r0, [r2, #0]
 8008bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bf4:	f380 8811 	msr	BASEPRI, r0
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f7fe ffbe 	bl	8007b80 <vTaskSwitchContext>
 8008c04:	f04f 0000 	mov.w	r0, #0
 8008c08:	f380 8811 	msr	BASEPRI, r0
 8008c0c:	bc09      	pop	{r0, r3}
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	6808      	ldr	r0, [r1, #0]
 8008c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c16:	f01e 0f10 	tst.w	lr, #16
 8008c1a:	bf08      	it	eq
 8008c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c20:	f380 8809 	msr	PSP, r0
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst>:
 8008c30:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	607b      	str	r3, [r7, #4]
}
 8008c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c52:	f7fe fedb 	bl	8007a0c <xTaskIncrementTick>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c5c:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <xPortSysTickHandler+0x40>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f383 8811 	msr	BASEPRI, r3
}
 8008c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <vPortSetupTimerInterrupt+0x34>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c86:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <vPortSetupTimerInterrupt+0x38>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <vPortSetupTimerInterrupt+0x3c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <vPortSetupTimerInterrupt+0x40>)
 8008c92:	fba2 2303 	umull	r2, r3, r2, r3
 8008c96:	099b      	lsrs	r3, r3, #6
 8008c98:	4a09      	ldr	r2, [pc, #36]	; (8008cc0 <vPortSetupTimerInterrupt+0x44>)
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c9e:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <vPortSetupTimerInterrupt+0x34>)
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	601a      	str	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	e000e010 	.word	0xe000e010
 8008cb4:	e000e018 	.word	0xe000e018
 8008cb8:	20000000 	.word	0x20000000
 8008cbc:	10624dd3 	.word	0x10624dd3
 8008cc0:	e000e014 	.word	0xe000e014

08008cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cd4 <vPortEnableVFP+0x10>
 8008cc8:	6801      	ldr	r1, [r0, #0]
 8008cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cce:	6001      	str	r1, [r0, #0]
 8008cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cd2:	bf00      	nop
 8008cd4:	e000ed88 	.word	0xe000ed88

08008cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cde:	f3ef 8305 	mrs	r3, IPSR
 8008ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b0f      	cmp	r3, #15
 8008ce8:	d914      	bls.n	8008d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <vPortValidateInterruptPriority+0x70>)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cf4:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <vPortValidateInterruptPriority+0x74>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	7afa      	ldrb	r2, [r7, #11]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d20a      	bcs.n	8008d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	607b      	str	r3, [r7, #4]
}
 8008d10:	bf00      	nop
 8008d12:	e7fe      	b.n	8008d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d14:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <vPortValidateInterruptPriority+0x78>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <vPortValidateInterruptPriority+0x7c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d90a      	bls.n	8008d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	603b      	str	r3, [r7, #0]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <vPortValidateInterruptPriority+0x60>
	}
 8008d3a:	bf00      	nop
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	e000e3f0 	.word	0xe000e3f0
 8008d4c:	20000ebc 	.word	0x20000ebc
 8008d50:	e000ed0c 	.word	0xe000ed0c
 8008d54:	20000ec0 	.word	0x20000ec0

08008d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	; 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d60:	2300      	movs	r3, #0
 8008d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d64:	f7fe fd96 	bl	8007894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d68:	4b5b      	ldr	r3, [pc, #364]	; (8008ed8 <pvPortMalloc+0x180>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d70:	f000 f920 	bl	8008fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d74:	4b59      	ldr	r3, [pc, #356]	; (8008edc <pvPortMalloc+0x184>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 8093 	bne.w	8008ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01d      	beq.n	8008dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d88:	2208      	movs	r2, #8
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d014      	beq.n	8008dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f023 0307 	bic.w	r3, r3, #7
 8008da0:	3308      	adds	r3, #8
 8008da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	617b      	str	r3, [r7, #20]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d06e      	beq.n	8008ea8 <pvPortMalloc+0x150>
 8008dca:	4b45      	ldr	r3, [pc, #276]	; (8008ee0 <pvPortMalloc+0x188>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d869      	bhi.n	8008ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dd4:	4b43      	ldr	r3, [pc, #268]	; (8008ee4 <pvPortMalloc+0x18c>)
 8008dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dd8:	4b42      	ldr	r3, [pc, #264]	; (8008ee4 <pvPortMalloc+0x18c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dde:	e004      	b.n	8008dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d903      	bls.n	8008dfc <pvPortMalloc+0xa4>
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1f1      	bne.n	8008de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dfc:	4b36      	ldr	r3, [pc, #216]	; (8008ed8 <pvPortMalloc+0x180>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d050      	beq.n	8008ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	4413      	add	r3, r2
 8008e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	1ad2      	subs	r2, r2, r3
 8008e20:	2308      	movs	r3, #8
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d91f      	bls.n	8008e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <pvPortMalloc+0xf8>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	613b      	str	r3, [r7, #16]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	1ad2      	subs	r2, r2, r3
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e62:	69b8      	ldr	r0, [r7, #24]
 8008e64:	f000 f908 	bl	8009078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e68:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <pvPortMalloc+0x188>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	4a1b      	ldr	r2, [pc, #108]	; (8008ee0 <pvPortMalloc+0x188>)
 8008e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e76:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <pvPortMalloc+0x188>)
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <pvPortMalloc+0x190>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d203      	bcs.n	8008e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e82:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <pvPortMalloc+0x188>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <pvPortMalloc+0x190>)
 8008e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <pvPortMalloc+0x184>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <pvPortMalloc+0x194>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	4a11      	ldr	r2, [pc, #68]	; (8008eec <pvPortMalloc+0x194>)
 8008ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ea8:	f7fe fd02 	bl	80078b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <pvPortMalloc+0x174>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60fb      	str	r3, [r7, #12]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <pvPortMalloc+0x172>
	return pvReturn;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3728      	adds	r7, #40	; 0x28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20004acc 	.word	0x20004acc
 8008edc:	20004ae0 	.word	0x20004ae0
 8008ee0:	20004ad0 	.word	0x20004ad0
 8008ee4:	20004ac4 	.word	0x20004ac4
 8008ee8:	20004ad4 	.word	0x20004ad4
 8008eec:	20004ad8 	.word	0x20004ad8

08008ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d04d      	beq.n	8008f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f02:	2308      	movs	r3, #8
 8008f04:	425b      	negs	r3, r3
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4413      	add	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	4b24      	ldr	r3, [pc, #144]	; (8008fa8 <vPortFree+0xb8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <vPortFree+0x44>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	60fb      	str	r3, [r7, #12]
}
 8008f30:	bf00      	nop
 8008f32:	e7fe      	b.n	8008f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <vPortFree+0x62>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60bb      	str	r3, [r7, #8]
}
 8008f4e:	bf00      	nop
 8008f50:	e7fe      	b.n	8008f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <vPortFree+0xb8>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01e      	beq.n	8008f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d11a      	bne.n	8008f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <vPortFree+0xb8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	43db      	mvns	r3, r3
 8008f72:	401a      	ands	r2, r3
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f78:	f7fe fc8c 	bl	8007894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <vPortFree+0xbc>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4413      	add	r3, r2
 8008f86:	4a09      	ldr	r2, [pc, #36]	; (8008fac <vPortFree+0xbc>)
 8008f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f8a:	6938      	ldr	r0, [r7, #16]
 8008f8c:	f000 f874 	bl	8009078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f90:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <vPortFree+0xc0>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3301      	adds	r3, #1
 8008f96:	4a06      	ldr	r2, [pc, #24]	; (8008fb0 <vPortFree+0xc0>)
 8008f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f9a:	f7fe fc89 	bl	80078b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f9e:	bf00      	nop
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20004ae0 	.word	0x20004ae0
 8008fac:	20004ad0 	.word	0x20004ad0
 8008fb0:	20004adc 	.word	0x20004adc

08008fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fc0:	4b27      	ldr	r3, [pc, #156]	; (8009060 <prvHeapInit+0xac>)
 8008fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00c      	beq.n	8008fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3307      	adds	r3, #7
 8008fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	4a1f      	ldr	r2, [pc, #124]	; (8009060 <prvHeapInit+0xac>)
 8008fe4:	4413      	add	r3, r2
 8008fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fec:	4a1d      	ldr	r2, [pc, #116]	; (8009064 <prvHeapInit+0xb0>)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ff2:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <prvHeapInit+0xb0>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009000:	2208      	movs	r2, #8
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0307 	bic.w	r3, r3, #7
 800900e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a15      	ldr	r2, [pc, #84]	; (8009068 <prvHeapInit+0xb4>)
 8009014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009016:	4b14      	ldr	r3, [pc, #80]	; (8009068 <prvHeapInit+0xb4>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2200      	movs	r2, #0
 800901c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800901e:	4b12      	ldr	r3, [pc, #72]	; (8009068 <prvHeapInit+0xb4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	1ad2      	subs	r2, r2, r3
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <prvHeapInit+0xb4>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	4a0a      	ldr	r2, [pc, #40]	; (800906c <prvHeapInit+0xb8>)
 8009042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	4a09      	ldr	r2, [pc, #36]	; (8009070 <prvHeapInit+0xbc>)
 800904a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <prvHeapInit+0xc0>)
 800904e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009052:	601a      	str	r2, [r3, #0]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	20000ec4 	.word	0x20000ec4
 8009064:	20004ac4 	.word	0x20004ac4
 8009068:	20004acc 	.word	0x20004acc
 800906c:	20004ad4 	.word	0x20004ad4
 8009070:	20004ad0 	.word	0x20004ad0
 8009074:	20004ae0 	.word	0x20004ae0

08009078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009080:	4b28      	ldr	r3, [pc, #160]	; (8009124 <prvInsertBlockIntoFreeList+0xac>)
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e002      	b.n	800908c <prvInsertBlockIntoFreeList+0x14>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d8f7      	bhi.n	8009086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	4413      	add	r3, r2
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d108      	bne.n	80090ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	441a      	add	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	441a      	add	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d118      	bne.n	8009100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b15      	ldr	r3, [pc, #84]	; (8009128 <prvInsertBlockIntoFreeList+0xb0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d00d      	beq.n	80090f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	441a      	add	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	e008      	b.n	8009108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090f6:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <prvInsertBlockIntoFreeList+0xb0>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	e003      	b.n	8009108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	429a      	cmp	r2, r3
 800910e:	d002      	beq.n	8009116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20004ac4 	.word	0x20004ac4
 8009128:	20004acc 	.word	0x20004acc

0800912c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009130:	2200      	movs	r2, #0
 8009132:	4912      	ldr	r1, [pc, #72]	; (800917c <MX_USB_DEVICE_Init+0x50>)
 8009134:	4812      	ldr	r0, [pc, #72]	; (8009180 <MX_USB_DEVICE_Init+0x54>)
 8009136:	f7fb ff7f 	bl	8005038 <USBD_Init>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009140:	f7f7 fb7a 	bl	8000838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009144:	490f      	ldr	r1, [pc, #60]	; (8009184 <MX_USB_DEVICE_Init+0x58>)
 8009146:	480e      	ldr	r0, [pc, #56]	; (8009180 <MX_USB_DEVICE_Init+0x54>)
 8009148:	f7fb ffa6 	bl	8005098 <USBD_RegisterClass>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009152:	f7f7 fb71 	bl	8000838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009156:	490c      	ldr	r1, [pc, #48]	; (8009188 <MX_USB_DEVICE_Init+0x5c>)
 8009158:	4809      	ldr	r0, [pc, #36]	; (8009180 <MX_USB_DEVICE_Init+0x54>)
 800915a:	f7fb fe97 	bl	8004e8c <USBD_CDC_RegisterInterface>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009164:	f7f7 fb68 	bl	8000838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009168:	4805      	ldr	r0, [pc, #20]	; (8009180 <MX_USB_DEVICE_Init+0x54>)
 800916a:	f7fb ffcb 	bl	8005104 <USBD_Start>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009174:	f7f7 fb60 	bl	8000838 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009178:	bf00      	nop
 800917a:	bd80      	pop	{r7, pc}
 800917c:	200000b0 	.word	0x200000b0
 8009180:	20004ae4 	.word	0x20004ae4
 8009184:	20000018 	.word	0x20000018
 8009188:	2000009c 	.word	0x2000009c

0800918c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Init_FS(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009190:	2200      	movs	r2, #0
 8009192:	4905      	ldr	r1, [pc, #20]	; (80091a8 <CDC_Init_FS+0x1c>)
 8009194:	4805      	ldr	r0, [pc, #20]	; (80091ac <CDC_Init_FS+0x20>)
 8009196:	f7fb fe93 	bl	8004ec0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800919a:	4905      	ldr	r1, [pc, #20]	; (80091b0 <CDC_Init_FS+0x24>)
 800919c:	4803      	ldr	r0, [pc, #12]	; (80091ac <CDC_Init_FS+0x20>)
 800919e:	f7fb feb1 	bl	8004f04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	200055c0 	.word	0x200055c0
 80091ac:	20004ae4 	.word	0x20004ae4
 80091b0:	20004dc0 	.word	0x20004dc0

080091b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_DeInit_FS(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	6039      	str	r1, [r7, #0]
 80091ce:	71fb      	strb	r3, [r7, #7]
 80091d0:	4613      	mov	r3, r2
 80091d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	2b23      	cmp	r3, #35	; 0x23
 80091d8:	d84a      	bhi.n	8009270 <CDC_Control_FS+0xac>
 80091da:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <CDC_Control_FS+0x1c>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	08009271 	.word	0x08009271
 80091e4:	08009271 	.word	0x08009271
 80091e8:	08009271 	.word	0x08009271
 80091ec:	08009271 	.word	0x08009271
 80091f0:	08009271 	.word	0x08009271
 80091f4:	08009271 	.word	0x08009271
 80091f8:	08009271 	.word	0x08009271
 80091fc:	08009271 	.word	0x08009271
 8009200:	08009271 	.word	0x08009271
 8009204:	08009271 	.word	0x08009271
 8009208:	08009271 	.word	0x08009271
 800920c:	08009271 	.word	0x08009271
 8009210:	08009271 	.word	0x08009271
 8009214:	08009271 	.word	0x08009271
 8009218:	08009271 	.word	0x08009271
 800921c:	08009271 	.word	0x08009271
 8009220:	08009271 	.word	0x08009271
 8009224:	08009271 	.word	0x08009271
 8009228:	08009271 	.word	0x08009271
 800922c:	08009271 	.word	0x08009271
 8009230:	08009271 	.word	0x08009271
 8009234:	08009271 	.word	0x08009271
 8009238:	08009271 	.word	0x08009271
 800923c:	08009271 	.word	0x08009271
 8009240:	08009271 	.word	0x08009271
 8009244:	08009271 	.word	0x08009271
 8009248:	08009271 	.word	0x08009271
 800924c:	08009271 	.word	0x08009271
 8009250:	08009271 	.word	0x08009271
 8009254:	08009271 	.word	0x08009271
 8009258:	08009271 	.word	0x08009271
 800925c:	08009271 	.word	0x08009271
 8009260:	08009271 	.word	0x08009271
 8009264:	08009271 	.word	0x08009271
 8009268:	08009271 	.word	0x08009271
 800926c:	08009271 	.word	0x08009271
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009270:	bf00      	nop
  }

  return (USBD_OK);
 8009272:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <CDC_Receive_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int flag = 0;

int8_t CDC_Receive_FS(uint8_t* Buf, uint16_t *Len)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
	if(Buf[0]=='S')
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b53      	cmp	r3, #83	; 0x53
 8009290:	d107      	bne.n	80092a2 <CDC_Receive_FS+0x22>
	{
		flag = 1;
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <CDC_Receive_FS+0x48>)
 8009294:	2201      	movs	r2, #1
 8009296:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, APP_TX_DATA_SIZE);
 8009298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800929c:	480b      	ldr	r0, [pc, #44]	; (80092cc <CDC_Receive_FS+0x4c>)
 800929e:	f000 f819 	bl	80092d4 <CDC_Transmit_FS>
	}
	if(Buf[0]=='E')
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b45      	cmp	r3, #69	; 0x45
 80092a8:	d102      	bne.n	80092b0 <CDC_Receive_FS+0x30>
	{
		flag = 0;
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <CDC_Receive_FS+0x48>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4807      	ldr	r0, [pc, #28]	; (80092d0 <CDC_Receive_FS+0x50>)
 80092b4:	f7fb fe26 	bl	8004f04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092b8:	4805      	ldr	r0, [pc, #20]	; (80092d0 <CDC_Receive_FS+0x50>)
 80092ba:	f7fb fe87 	bl	8004fcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20005dc0 	.word	0x20005dc0
 80092cc:	200055c0 	.word	0x200055c0
 80092d0:	20004ae4 	.word	0x20004ae4

080092d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
int8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092e4:	4b0d      	ldr	r3, [pc, #52]	; (800931c <CDC_Transmit_FS+0x48>)
 80092e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e00c      	b.n	8009314 <CDC_Transmit_FS+0x40>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092fa:	887b      	ldrh	r3, [r7, #2]
 80092fc:	461a      	mov	r2, r3
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4806      	ldr	r0, [pc, #24]	; (800931c <CDC_Transmit_FS+0x48>)
 8009302:	f7fb fddd 	bl	8004ec0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009306:	4805      	ldr	r0, [pc, #20]	; (800931c <CDC_Transmit_FS+0x48>)
 8009308:	f7fb fe1a 	bl	8004f40 <USBD_CDC_TransmitPacket>
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20004ae4 	.word	0x20004ae4

08009320 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	4613      	mov	r3, r2
 800932c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  if(flag)
 8009332:	4b07      	ldr	r3, [pc, #28]	; (8009350 <CDC_TransmitCplt_FS+0x30>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <CDC_TransmitCplt_FS+0x24>
  {
	  CDC_Transmit_FS(UserTxBufferFS, APP_TX_DATA_SIZE);
 800933a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800933e:	4805      	ldr	r0, [pc, #20]	; (8009354 <CDC_TransmitCplt_FS+0x34>)
 8009340:	f7ff ffc8 	bl	80092d4 <CDC_Transmit_FS>

  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20005dc0 	.word	0x20005dc0
 8009354:	200055c0 	.word	0x200055c0

08009358 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	6039      	str	r1, [r7, #0]
 8009362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2212      	movs	r2, #18
 8009368:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800936a:	4b03      	ldr	r3, [pc, #12]	; (8009378 <USBD_FS_DeviceDescriptor+0x20>)
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	200000cc 	.word	0x200000cc

0800937c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	6039      	str	r1, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2204      	movs	r2, #4
 800938c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	200000e0 	.word	0x200000e0

080093a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d105      	bne.n	80093be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	4907      	ldr	r1, [pc, #28]	; (80093d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80093b6:	4808      	ldr	r0, [pc, #32]	; (80093d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80093b8:	f7fd f850 	bl	800645c <USBD_GetString>
 80093bc:	e004      	b.n	80093c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4904      	ldr	r1, [pc, #16]	; (80093d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80093c2:	4805      	ldr	r0, [pc, #20]	; (80093d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80093c4:	f7fd f84a 	bl	800645c <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20005dc4 	.word	0x20005dc4
 80093d8:	08009e10 	.word	0x08009e10

080093dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	4904      	ldr	r1, [pc, #16]	; (80093fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093ec:	4804      	ldr	r0, [pc, #16]	; (8009400 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093ee:	f7fd f835 	bl	800645c <USBD_GetString>
  return USBD_StrDesc;
 80093f2:	4b02      	ldr	r3, [pc, #8]	; (80093fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20005dc4 	.word	0x20005dc4
 8009400:	08009e28 	.word	0x08009e28

08009404 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	6039      	str	r1, [r7, #0]
 800940e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	221a      	movs	r2, #26
 8009414:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009416:	f000 f843 	bl	80094a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800941a:	4b02      	ldr	r3, [pc, #8]	; (8009424 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	200000e4 	.word	0x200000e4

08009428 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	6039      	str	r1, [r7, #0]
 8009432:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	4907      	ldr	r1, [pc, #28]	; (800945c <USBD_FS_ConfigStrDescriptor+0x34>)
 800943e:	4808      	ldr	r0, [pc, #32]	; (8009460 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009440:	f7fd f80c 	bl	800645c <USBD_GetString>
 8009444:	e004      	b.n	8009450 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	4904      	ldr	r1, [pc, #16]	; (800945c <USBD_FS_ConfigStrDescriptor+0x34>)
 800944a:	4805      	ldr	r0, [pc, #20]	; (8009460 <USBD_FS_ConfigStrDescriptor+0x38>)
 800944c:	f7fd f806 	bl	800645c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20005dc4 	.word	0x20005dc4
 8009460:	08009e3c 	.word	0x08009e3c

08009464 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d105      	bne.n	8009482 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	4907      	ldr	r1, [pc, #28]	; (8009498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800947a:	4808      	ldr	r0, [pc, #32]	; (800949c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800947c:	f7fc ffee 	bl	800645c <USBD_GetString>
 8009480:	e004      	b.n	800948c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4904      	ldr	r1, [pc, #16]	; (8009498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009486:	4805      	ldr	r0, [pc, #20]	; (800949c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009488:	f7fc ffe8 	bl	800645c <USBD_GetString>
  }
  return USBD_StrDesc;
 800948c:	4b02      	ldr	r3, [pc, #8]	; (8009498 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20005dc4 	.word	0x20005dc4
 800949c:	08009e48 	.word	0x08009e48

080094a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094a6:	4b0f      	ldr	r3, [pc, #60]	; (80094e4 <Get_SerialNum+0x44>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094ac:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <Get_SerialNum+0x48>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094b2:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <Get_SerialNum+0x4c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d009      	beq.n	80094da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094c6:	2208      	movs	r2, #8
 80094c8:	4909      	ldr	r1, [pc, #36]	; (80094f0 <Get_SerialNum+0x50>)
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f814 	bl	80094f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094d0:	2204      	movs	r2, #4
 80094d2:	4908      	ldr	r1, [pc, #32]	; (80094f4 <Get_SerialNum+0x54>)
 80094d4:	68b8      	ldr	r0, [r7, #8]
 80094d6:	f000 f80f 	bl	80094f8 <IntToUnicode>
  }
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	1fff7a10 	.word	0x1fff7a10
 80094e8:	1fff7a14 	.word	0x1fff7a14
 80094ec:	1fff7a18 	.word	0x1fff7a18
 80094f0:	200000e6 	.word	0x200000e6
 80094f4:	200000f6 	.word	0x200000f6

080094f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	4613      	mov	r3, r2
 8009504:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]
 800950e:	e027      	b.n	8009560 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	0f1b      	lsrs	r3, r3, #28
 8009514:	2b09      	cmp	r3, #9
 8009516:	d80b      	bhi.n	8009530 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	0f1b      	lsrs	r3, r3, #28
 800951c:	b2da      	uxtb	r2, r3
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	005b      	lsls	r3, r3, #1
 8009522:	4619      	mov	r1, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	440b      	add	r3, r1
 8009528:	3230      	adds	r2, #48	; 0x30
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	e00a      	b.n	8009546 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	0f1b      	lsrs	r3, r3, #28
 8009534:	b2da      	uxtb	r2, r3
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	4619      	mov	r1, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	440b      	add	r3, r1
 8009540:	3237      	adds	r2, #55	; 0x37
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	011b      	lsls	r3, r3, #4
 800954a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	3301      	adds	r3, #1
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	4413      	add	r3, r2
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	3301      	adds	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]
 8009560:	7dfa      	ldrb	r2, [r7, #23]
 8009562:	79fb      	ldrb	r3, [r7, #7]
 8009564:	429a      	cmp	r2, r3
 8009566:	d3d3      	bcc.n	8009510 <IntToUnicode+0x18>
  }
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
	...

08009578 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08a      	sub	sp, #40	; 0x28
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009580:	f107 0314 	add.w	r3, r7, #20
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	605a      	str	r2, [r3, #4]
 800958a:	609a      	str	r2, [r3, #8]
 800958c:	60da      	str	r2, [r3, #12]
 800958e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009598:	d13a      	bne.n	8009610 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800959a:	2300      	movs	r3, #0
 800959c:	613b      	str	r3, [r7, #16]
 800959e:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	4a1d      	ldr	r2, [pc, #116]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	6313      	str	r3, [r2, #48]	; 0x30
 80095aa:	4b1b      	ldr	r3, [pc, #108]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
 80095b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80095b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80095ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095bc:	2302      	movs	r3, #2
 80095be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095c4:	2303      	movs	r3, #3
 80095c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80095c8:	230a      	movs	r3, #10
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095cc:	f107 0314 	add.w	r3, r7, #20
 80095d0:	4619      	mov	r1, r3
 80095d2:	4812      	ldr	r0, [pc, #72]	; (800961c <HAL_PCD_MspInit+0xa4>)
 80095d4:	f7f7 fbaa 	bl	8000d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80095d8:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	4a0e      	ldr	r2, [pc, #56]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e2:	6353      	str	r3, [r2, #52]	; 0x34
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ec:	4a0a      	ldr	r2, [pc, #40]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095f2:	6453      	str	r3, [r2, #68]	; 0x44
 80095f4:	4b08      	ldr	r3, [pc, #32]	; (8009618 <HAL_PCD_MspInit+0xa0>)
 80095f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 8009600:	2200      	movs	r2, #0
 8009602:	2104      	movs	r1, #4
 8009604:	2043      	movs	r0, #67	; 0x43
 8009606:	f7f7 fb5a 	bl	8000cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800960a:	2043      	movs	r0, #67	; 0x43
 800960c:	f7f7 fb73 	bl	8000cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009610:	bf00      	nop
 8009612:	3728      	adds	r7, #40	; 0x28
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	40023800 	.word	0x40023800
 800961c:	40020000 	.word	0x40020000

08009620 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f7fb fdb1 	bl	800519e <USBD_LL_SetupStage>
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	4619      	mov	r1, r3
 800966e:	f7fb fdeb 	bl	8005248 <USBD_LL_DataOutStage>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4613      	mov	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	334c      	adds	r3, #76	; 0x4c
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	4619      	mov	r1, r3
 80096a2:	f7fb fe84 	bl	80053ae <USBD_LL_DataInStage>
}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fb ffb8 	bl	8005632 <USBD_LL_SOF>
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096d2:	2301      	movs	r3, #1
 80096d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	e008      	b.n	80096f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d102      	bne.n	80096f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80096ec:	2301      	movs	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
 80096f0:	e001      	b.n	80096f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80096f2:	f7f7 f8a1 	bl	8000838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096fc:	7bfa      	ldrb	r2, [r7, #15]
 80096fe:	4611      	mov	r1, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f7fb ff58 	bl	80055b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800970c:	4618      	mov	r0, r3
 800970e:	f7fb ff00 	bl	8005512 <USBD_LL_Reset>
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800972a:	4618      	mov	r0, r3
 800972c:	f7fb ff53 	bl	80055d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	6812      	ldr	r2, [r2, #0]
 800973e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009750:	4b04      	ldr	r3, [pc, #16]	; (8009764 <HAL_PCD_SuspendCallback+0x48>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	4a03      	ldr	r2, [pc, #12]	; (8009764 <HAL_PCD_SuspendCallback+0x48>)
 8009756:	f043 0306 	orr.w	r3, r3, #6
 800975a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	e000ed00 	.word	0xe000ed00

08009768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009776:	4618      	mov	r0, r3
 8009778:	f7fb ff43 	bl	8005602 <USBD_LL_Resume>
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009796:	78fa      	ldrb	r2, [r7, #3]
 8009798:	4611      	mov	r1, r2
 800979a:	4618      	mov	r0, r3
 800979c:	f7fb ff9b 	bl	80056d6 <USBD_LL_IsoOUTIncomplete>
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fb ff57 	bl	8005672 <USBD_LL_IsoINIncomplete>
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fb ffad 	bl	800573a <USBD_LL_DevConnected>
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fb ffaa 	bl	8005750 <USBD_LL_DevDisconnected>
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d13c      	bne.n	800988e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009814:	4a20      	ldr	r2, [pc, #128]	; (8009898 <USBD_LL_Init+0x94>)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a1e      	ldr	r2, [pc, #120]	; (8009898 <USBD_LL_Init+0x94>)
 8009820:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009824:	4b1c      	ldr	r3, [pc, #112]	; (8009898 <USBD_LL_Init+0x94>)
 8009826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800982a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800982c:	4b1a      	ldr	r3, [pc, #104]	; (8009898 <USBD_LL_Init+0x94>)
 800982e:	2204      	movs	r2, #4
 8009830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009832:	4b19      	ldr	r3, [pc, #100]	; (8009898 <USBD_LL_Init+0x94>)
 8009834:	2202      	movs	r2, #2
 8009836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009838:	4b17      	ldr	r3, [pc, #92]	; (8009898 <USBD_LL_Init+0x94>)
 800983a:	2200      	movs	r2, #0
 800983c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800983e:	4b16      	ldr	r3, [pc, #88]	; (8009898 <USBD_LL_Init+0x94>)
 8009840:	2202      	movs	r2, #2
 8009842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009844:	4b14      	ldr	r3, [pc, #80]	; (8009898 <USBD_LL_Init+0x94>)
 8009846:	2200      	movs	r2, #0
 8009848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800984a:	4b13      	ldr	r3, [pc, #76]	; (8009898 <USBD_LL_Init+0x94>)
 800984c:	2200      	movs	r2, #0
 800984e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009850:	4b11      	ldr	r3, [pc, #68]	; (8009898 <USBD_LL_Init+0x94>)
 8009852:	2200      	movs	r2, #0
 8009854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009856:	4b10      	ldr	r3, [pc, #64]	; (8009898 <USBD_LL_Init+0x94>)
 8009858:	2200      	movs	r2, #0
 800985a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800985c:	4b0e      	ldr	r3, [pc, #56]	; (8009898 <USBD_LL_Init+0x94>)
 800985e:	2200      	movs	r2, #0
 8009860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009862:	480d      	ldr	r0, [pc, #52]	; (8009898 <USBD_LL_Init+0x94>)
 8009864:	f7f7 fc17 	bl	8001096 <HAL_PCD_Init>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800986e:	f7f6 ffe3 	bl	8000838 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009872:	2180      	movs	r1, #128	; 0x80
 8009874:	4808      	ldr	r0, [pc, #32]	; (8009898 <USBD_LL_Init+0x94>)
 8009876:	f7f8 fe6e 	bl	8002556 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800987a:	2240      	movs	r2, #64	; 0x40
 800987c:	2100      	movs	r1, #0
 800987e:	4806      	ldr	r0, [pc, #24]	; (8009898 <USBD_LL_Init+0x94>)
 8009880:	f7f8 fe22 	bl	80024c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009884:	2280      	movs	r2, #128	; 0x80
 8009886:	2101      	movs	r1, #1
 8009888:	4803      	ldr	r0, [pc, #12]	; (8009898 <USBD_LL_Init+0x94>)
 800988a:	f7f8 fe1d 	bl	80024c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20005fc4 	.word	0x20005fc4

0800989c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7f7 fd0c 	bl	80012d0 <HAL_PCD_Start>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f942 	bl	8009b48 <USBD_Get_USB_Status>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	4608      	mov	r0, r1
 80098dc:	4611      	mov	r1, r2
 80098de:	461a      	mov	r2, r3
 80098e0:	4603      	mov	r3, r0
 80098e2:	70fb      	strb	r3, [r7, #3]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70bb      	strb	r3, [r7, #2]
 80098e8:	4613      	mov	r3, r2
 80098ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098fa:	78bb      	ldrb	r3, [r7, #2]
 80098fc:	883a      	ldrh	r2, [r7, #0]
 80098fe:	78f9      	ldrb	r1, [r7, #3]
 8009900:	f7f8 f9dd 	bl	8001cbe <HAL_PCD_EP_Open>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f91c 	bl	8009b48 <USBD_Get_USB_Status>
 8009910:	4603      	mov	r3, r0
 8009912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009914:	7bbb      	ldrb	r3, [r7, #14]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7f8 fa26 	bl	8001d8e <HAL_PCD_EP_Close>
 8009942:	4603      	mov	r3, r0
 8009944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f8fd 	bl	8009b48 <USBD_Get_USB_Status>
 800994e:	4603      	mov	r3, r0
 8009950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009952:	7bbb      	ldrb	r3, [r7, #14]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009976:	78fa      	ldrb	r2, [r7, #3]
 8009978:	4611      	mov	r1, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f7f8 fafe 	bl	8001f7c <HAL_PCD_EP_SetStall>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 f8de 	bl	8009b48 <USBD_Get_USB_Status>
 800998c:	4603      	mov	r3, r0
 800998e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009990:	7bbb      	ldrb	r3, [r7, #14]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	4611      	mov	r1, r2
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7f8 fb43 	bl	8002044 <HAL_PCD_EP_ClrStall>
 80099be:	4603      	mov	r3, r0
 80099c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 f8bf 	bl	8009b48 <USBD_Get_USB_Status>
 80099ca:	4603      	mov	r3, r0
 80099cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	da0b      	bge.n	8009a0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099fa:	68f9      	ldr	r1, [r7, #12]
 80099fc:	4613      	mov	r3, r2
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	333e      	adds	r3, #62	; 0x3e
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	e00b      	b.n	8009a24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a12:	68f9      	ldr	r1, [r7, #12]
 8009a14:	4613      	mov	r3, r2
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a4a:	78fa      	ldrb	r2, [r7, #3]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7f8 f910 	bl	8001c74 <HAL_PCD_SetAddress>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f874 	bl	8009b48 <USBD_Get_USB_Status>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b086      	sub	sp, #24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a8c:	7af9      	ldrb	r1, [r7, #11]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	f7f8 fa29 	bl	8001ee8 <HAL_PCD_EP_Transmit>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 f853 	bl	8009b48 <USBD_Get_USB_Status>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	460b      	mov	r3, r1
 8009abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ace:	7af9      	ldrb	r1, [r7, #11]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	f7f8 f9a5 	bl	8001e22 <HAL_PCD_EP_Receive>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f832 	bl	8009b48 <USBD_Get_USB_Status>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ae8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f8 f9d5 	bl	8001eb8 <HAL_PCD_EP_GetRxCount>
 8009b0e:	4603      	mov	r3, r0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b20:	4b03      	ldr	r3, [pc, #12]	; (8009b30 <USBD_static_malloc+0x18>)
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	200064d0 	.word	0x200064d0

08009b34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]

}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d817      	bhi.n	8009b8c <USBD_Get_USB_Status+0x44>
 8009b5c:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <USBD_Get_USB_Status+0x1c>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b7b 	.word	0x08009b7b
 8009b6c:	08009b81 	.word	0x08009b81
 8009b70:	08009b87 	.word	0x08009b87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
    break;
 8009b78:	e00b      	b.n	8009b92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b7e:	e008      	b.n	8009b92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b80:	2301      	movs	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]
    break;
 8009b84:	e005      	b.n	8009b92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b86:	2303      	movs	r3, #3
 8009b88:	73fb      	strb	r3, [r7, #15]
    break;
 8009b8a:	e002      	b.n	8009b92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b90:	bf00      	nop
  }
  return usb_status;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <__errno>:
 8009ba0:	4b01      	ldr	r3, [pc, #4]	; (8009ba8 <__errno+0x8>)
 8009ba2:	6818      	ldr	r0, [r3, #0]
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20000100 	.word	0x20000100

08009bac <__libc_init_array>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	4d0d      	ldr	r5, [pc, #52]	; (8009be4 <__libc_init_array+0x38>)
 8009bb0:	4c0d      	ldr	r4, [pc, #52]	; (8009be8 <__libc_init_array+0x3c>)
 8009bb2:	1b64      	subs	r4, r4, r5
 8009bb4:	10a4      	asrs	r4, r4, #2
 8009bb6:	2600      	movs	r6, #0
 8009bb8:	42a6      	cmp	r6, r4
 8009bba:	d109      	bne.n	8009bd0 <__libc_init_array+0x24>
 8009bbc:	4d0b      	ldr	r5, [pc, #44]	; (8009bec <__libc_init_array+0x40>)
 8009bbe:	4c0c      	ldr	r4, [pc, #48]	; (8009bf0 <__libc_init_array+0x44>)
 8009bc0:	f000 f902 	bl	8009dc8 <_init>
 8009bc4:	1b64      	subs	r4, r4, r5
 8009bc6:	10a4      	asrs	r4, r4, #2
 8009bc8:	2600      	movs	r6, #0
 8009bca:	42a6      	cmp	r6, r4
 8009bcc:	d105      	bne.n	8009bda <__libc_init_array+0x2e>
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd4:	4798      	blx	r3
 8009bd6:	3601      	adds	r6, #1
 8009bd8:	e7ee      	b.n	8009bb8 <__libc_init_array+0xc>
 8009bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bde:	4798      	blx	r3
 8009be0:	3601      	adds	r6, #1
 8009be2:	e7f2      	b.n	8009bca <__libc_init_array+0x1e>
 8009be4:	08009eb8 	.word	0x08009eb8
 8009be8:	08009eb8 	.word	0x08009eb8
 8009bec:	08009eb8 	.word	0x08009eb8
 8009bf0:	08009ebc 	.word	0x08009ebc

08009bf4 <malloc>:
 8009bf4:	4b02      	ldr	r3, [pc, #8]	; (8009c00 <malloc+0xc>)
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	6818      	ldr	r0, [r3, #0]
 8009bfa:	f000 b853 	b.w	8009ca4 <_malloc_r>
 8009bfe:	bf00      	nop
 8009c00:	20000100 	.word	0x20000100

08009c04 <memcpy>:
 8009c04:	440a      	add	r2, r1
 8009c06:	4291      	cmp	r1, r2
 8009c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c0c:	d100      	bne.n	8009c10 <memcpy+0xc>
 8009c0e:	4770      	bx	lr
 8009c10:	b510      	push	{r4, lr}
 8009c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	d1f9      	bne.n	8009c12 <memcpy+0xe>
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <memmove>:
 8009c20:	4288      	cmp	r0, r1
 8009c22:	b510      	push	{r4, lr}
 8009c24:	eb01 0402 	add.w	r4, r1, r2
 8009c28:	d902      	bls.n	8009c30 <memmove+0x10>
 8009c2a:	4284      	cmp	r4, r0
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	d807      	bhi.n	8009c40 <memmove+0x20>
 8009c30:	1e43      	subs	r3, r0, #1
 8009c32:	42a1      	cmp	r1, r4
 8009c34:	d008      	beq.n	8009c48 <memmove+0x28>
 8009c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3e:	e7f8      	b.n	8009c32 <memmove+0x12>
 8009c40:	4402      	add	r2, r0
 8009c42:	4601      	mov	r1, r0
 8009c44:	428a      	cmp	r2, r1
 8009c46:	d100      	bne.n	8009c4a <memmove+0x2a>
 8009c48:	bd10      	pop	{r4, pc}
 8009c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c52:	e7f7      	b.n	8009c44 <memmove+0x24>

08009c54 <memset>:
 8009c54:	4402      	add	r2, r0
 8009c56:	4603      	mov	r3, r0
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d100      	bne.n	8009c5e <memset+0xa>
 8009c5c:	4770      	bx	lr
 8009c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c62:	e7f9      	b.n	8009c58 <memset+0x4>

08009c64 <sbrk_aligned>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	4e0e      	ldr	r6, [pc, #56]	; (8009ca0 <sbrk_aligned+0x3c>)
 8009c68:	460c      	mov	r4, r1
 8009c6a:	6831      	ldr	r1, [r6, #0]
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	b911      	cbnz	r1, 8009c76 <sbrk_aligned+0x12>
 8009c70:	f000 f88c 	bl	8009d8c <_sbrk_r>
 8009c74:	6030      	str	r0, [r6, #0]
 8009c76:	4621      	mov	r1, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f000 f887 	bl	8009d8c <_sbrk_r>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d00a      	beq.n	8009c98 <sbrk_aligned+0x34>
 8009c82:	1cc4      	adds	r4, r0, #3
 8009c84:	f024 0403 	bic.w	r4, r4, #3
 8009c88:	42a0      	cmp	r0, r4
 8009c8a:	d007      	beq.n	8009c9c <sbrk_aligned+0x38>
 8009c8c:	1a21      	subs	r1, r4, r0
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 f87c 	bl	8009d8c <_sbrk_r>
 8009c94:	3001      	adds	r0, #1
 8009c96:	d101      	bne.n	8009c9c <sbrk_aligned+0x38>
 8009c98:	f04f 34ff 	mov.w	r4, #4294967295
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	200066f4 	.word	0x200066f4

08009ca4 <_malloc_r>:
 8009ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	1ccd      	adds	r5, r1, #3
 8009caa:	f025 0503 	bic.w	r5, r5, #3
 8009cae:	3508      	adds	r5, #8
 8009cb0:	2d0c      	cmp	r5, #12
 8009cb2:	bf38      	it	cc
 8009cb4:	250c      	movcc	r5, #12
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	4607      	mov	r7, r0
 8009cba:	db01      	blt.n	8009cc0 <_malloc_r+0x1c>
 8009cbc:	42a9      	cmp	r1, r5
 8009cbe:	d905      	bls.n	8009ccc <_malloc_r+0x28>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	2600      	movs	r6, #0
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ccc:	4e2e      	ldr	r6, [pc, #184]	; (8009d88 <_malloc_r+0xe4>)
 8009cce:	f000 f86d 	bl	8009dac <__malloc_lock>
 8009cd2:	6833      	ldr	r3, [r6, #0]
 8009cd4:	461c      	mov	r4, r3
 8009cd6:	bb34      	cbnz	r4, 8009d26 <_malloc_r+0x82>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f7ff ffc2 	bl	8009c64 <sbrk_aligned>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	d14d      	bne.n	8009d82 <_malloc_r+0xde>
 8009ce6:	6834      	ldr	r4, [r6, #0]
 8009ce8:	4626      	mov	r6, r4
 8009cea:	2e00      	cmp	r6, #0
 8009cec:	d140      	bne.n	8009d70 <_malloc_r+0xcc>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	eb04 0803 	add.w	r8, r4, r3
 8009cf8:	f000 f848 	bl	8009d8c <_sbrk_r>
 8009cfc:	4580      	cmp	r8, r0
 8009cfe:	d13a      	bne.n	8009d76 <_malloc_r+0xd2>
 8009d00:	6821      	ldr	r1, [r4, #0]
 8009d02:	3503      	adds	r5, #3
 8009d04:	1a6d      	subs	r5, r5, r1
 8009d06:	f025 0503 	bic.w	r5, r5, #3
 8009d0a:	3508      	adds	r5, #8
 8009d0c:	2d0c      	cmp	r5, #12
 8009d0e:	bf38      	it	cc
 8009d10:	250c      	movcc	r5, #12
 8009d12:	4629      	mov	r1, r5
 8009d14:	4638      	mov	r0, r7
 8009d16:	f7ff ffa5 	bl	8009c64 <sbrk_aligned>
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d02b      	beq.n	8009d76 <_malloc_r+0xd2>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	442b      	add	r3, r5
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	e00e      	b.n	8009d44 <_malloc_r+0xa0>
 8009d26:	6822      	ldr	r2, [r4, #0]
 8009d28:	1b52      	subs	r2, r2, r5
 8009d2a:	d41e      	bmi.n	8009d6a <_malloc_r+0xc6>
 8009d2c:	2a0b      	cmp	r2, #11
 8009d2e:	d916      	bls.n	8009d5e <_malloc_r+0xba>
 8009d30:	1961      	adds	r1, r4, r5
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	6025      	str	r5, [r4, #0]
 8009d36:	bf18      	it	ne
 8009d38:	6059      	strne	r1, [r3, #4]
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	bf08      	it	eq
 8009d3e:	6031      	streq	r1, [r6, #0]
 8009d40:	5162      	str	r2, [r4, r5]
 8009d42:	604b      	str	r3, [r1, #4]
 8009d44:	4638      	mov	r0, r7
 8009d46:	f104 060b 	add.w	r6, r4, #11
 8009d4a:	f000 f835 	bl	8009db8 <__malloc_unlock>
 8009d4e:	f026 0607 	bic.w	r6, r6, #7
 8009d52:	1d23      	adds	r3, r4, #4
 8009d54:	1af2      	subs	r2, r6, r3
 8009d56:	d0b6      	beq.n	8009cc6 <_malloc_r+0x22>
 8009d58:	1b9b      	subs	r3, r3, r6
 8009d5a:	50a3      	str	r3, [r4, r2]
 8009d5c:	e7b3      	b.n	8009cc6 <_malloc_r+0x22>
 8009d5e:	6862      	ldr	r2, [r4, #4]
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	bf0c      	ite	eq
 8009d64:	6032      	streq	r2, [r6, #0]
 8009d66:	605a      	strne	r2, [r3, #4]
 8009d68:	e7ec      	b.n	8009d44 <_malloc_r+0xa0>
 8009d6a:	4623      	mov	r3, r4
 8009d6c:	6864      	ldr	r4, [r4, #4]
 8009d6e:	e7b2      	b.n	8009cd6 <_malloc_r+0x32>
 8009d70:	4634      	mov	r4, r6
 8009d72:	6876      	ldr	r6, [r6, #4]
 8009d74:	e7b9      	b.n	8009cea <_malloc_r+0x46>
 8009d76:	230c      	movs	r3, #12
 8009d78:	603b      	str	r3, [r7, #0]
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	f000 f81c 	bl	8009db8 <__malloc_unlock>
 8009d80:	e7a1      	b.n	8009cc6 <_malloc_r+0x22>
 8009d82:	6025      	str	r5, [r4, #0]
 8009d84:	e7de      	b.n	8009d44 <_malloc_r+0xa0>
 8009d86:	bf00      	nop
 8009d88:	200066f0 	.word	0x200066f0

08009d8c <_sbrk_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d06      	ldr	r5, [pc, #24]	; (8009da8 <_sbrk_r+0x1c>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f6 fdae 	bl	80008f8 <_sbrk>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_sbrk_r+0x1a>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_sbrk_r+0x1a>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	200066f8 	.word	0x200066f8

08009dac <__malloc_lock>:
 8009dac:	4801      	ldr	r0, [pc, #4]	; (8009db4 <__malloc_lock+0x8>)
 8009dae:	f000 b809 	b.w	8009dc4 <__retarget_lock_acquire_recursive>
 8009db2:	bf00      	nop
 8009db4:	200066fc 	.word	0x200066fc

08009db8 <__malloc_unlock>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__malloc_unlock+0x8>)
 8009dba:	f000 b804 	b.w	8009dc6 <__retarget_lock_release_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	200066fc 	.word	0x200066fc

08009dc4 <__retarget_lock_acquire_recursive>:
 8009dc4:	4770      	bx	lr

08009dc6 <__retarget_lock_release_recursive>:
 8009dc6:	4770      	bx	lr

08009dc8 <_init>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	bf00      	nop
 8009dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dce:	bc08      	pop	{r3}
 8009dd0:	469e      	mov	lr, r3
 8009dd2:	4770      	bx	lr

08009dd4 <_fini>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr
